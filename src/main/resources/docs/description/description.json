[
  {
    "patternId": "Layout_FirstMethodArgumentLineBreak",
    "title": "Checks for a line break before the first argument in a multi-line method call.",
    "description": "Checks for a line break before the first argument in a multi-line method call.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MultilineTernaryOperator",
    "title": "Avoid multi-line ?: (the ternary operator); use if/unless instead.",
    "description": "Avoid multi-line ?: (the ternary operator); use if/unless instead.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_Loop",
    "title": "Use Kernel#loop with break rather than begin/end/until or begin/end/while for post-loop tests.",
    "description": "Use Kernel#loop with break rather than begin/end/until or begin/end/while for post-loop tests.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceBeforeSemicolon",
    "title": "No spaces before semicolons.",
    "description": "No spaces before semicolons.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLinesAroundBeginBody",
    "title": "Keeps track of empty lines around begin-end bodies.",
    "description": "Keeps track of empty lines around begin-end bodies.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_CommentIndentation",
    "title": "Indentation of comments.",
    "description": "Indentation of comments.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_IfUnlessModifierOfIfUnless",
    "title": "Avoid modifier if/unless usage on conditionals.",
    "description": "Avoid modifier if/unless usage on conditionals.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_EndInMethod",
    "title": "END blocks should not be placed inside method definitions.",
    "description": "END blocks should not be placed inside method definitions.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RescueModifier",
    "title": "Avoid using rescue in its modifier form.",
    "description": "Avoid using rescue in its modifier form.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RandOne",
    "title": "Checks for `rand(1)` calls. Such calls always return `0` and most likely a mistake.",
    "description": "Checks for `rand(1)` calls. Such calls always return `0` and most likely a mistake.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_UnlessElse",
    "title": "Do not use unless with else. Rewrite these with the positive case first.",
    "description": "Do not use unless with else. Rewrite these with the positive case first.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_FirstMethodParameterLineBreak",
    "title": "Checks for a line break before the first parameter in a multi-line method parameter definition.",
    "description": "Checks for a line break before the first parameter in a multi-line method parameter definition.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ColonMethodCall",
    "title": "Do not use :: for method call.",
    "description": "Do not use :: for method call.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_DuplicatedKey",
    "title": "Check for duplicate keys in hash literals.",
    "description": "Check for duplicate keys in hash literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_OneLineConditional",
    "title": "Favor the ternary operator(?:) over if/then/else/end constructs.",
    "description": "Favor the ternary operator(?:) over if/then/else/end constructs.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_FilePath",
    "title": "Use `Rails.root.join` for file path joining.",
    "description": "Use `Rails.root.join` for file path joining.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_PerlBackrefs",
    "title": "Avoid Perl-style regex back references.",
    "description": "Avoid Perl-style regex back references.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_Blank",
    "title": "Enforce using `blank?` and `present?`.",
    "description": "Enforce using `blank?` and `present?`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "NilOrEmpty",
        "description": "Convert checks for `nil` or `empty?` to `blank?`"
      },
      {
        "name": "NotPresent",
        "description": "Convert usages of not `present?` to `blank?`"
      },
      {
        "name": "UnlessPresent",
        "description": "Convert usages of `unless` `present?` to `if` `blank?`"
      }
    ]
  },
  {
    "patternId": "Style_EmptyLiteral",
    "title": "Prefer literals to Array.new/Hash.new/String.new.",
    "description": "Prefer literals to Array.new/Hash.new/String.new.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ZeroLengthPredicate",
    "title": "Use #empty? when testing for objects of length 0.",
    "description": "Use #empty? when testing for objects of length 0.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_EndWith",
    "title": "Use `end_with?` instead of a regex match anchored to the end of a string.",
    "description": "Use `end_with?` instead of a regex match anchored to the end of a string.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EmptyCaseCondition",
    "title": "Avoid empty condition in case statements.",
    "description": "Avoid empty condition in case statements.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ClassVars",
    "title": "Avoid the use of class variables.",
    "description": "Avoid the use of class variables.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ConditionPosition",
    "title": "Checks for condition placed in a confusing position relative to the keyword.",
    "description": "Checks for condition placed in a confusing position relative to the keyword.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAfterMethodName",
    "title": "Do not put a space between a method name and the opening parenthesis in a method definition.",
    "description": "Do not put a space between a method name and the opening parenthesis in a method definition.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_Size",
    "title": "Use `size` instead of `count` for counting the number of elements in `Array` and `Hash`.",
    "description": "Use `size` instead of `count` for counting the number of elements in `Array` and `Hash`.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_Present",
    "title": "Enforce using `blank?` and `present?`.",
    "description": "Enforce using `blank?` and `present?`.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "NotNilAndNotEmpty",
        "description": "Convert checks for not `nil` and not `empty?` to `present?"
      },
      {
        "name": "NotBlank",
        "description": "Convert usages of not `blank?` to `present?`"
      },
      {
        "name": "UnlessBlank",
        "description": "Convert usages of `unless` `blank?` to `if` `present?`"
      }
    ]
  },
  {
    "patternId": "Style_CharacterLiteral",
    "title": "Checks for uses of character literals.",
    "description": "Checks for uses of character literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_TimesMap",
    "title": "Checks for .times.map calls.",
    "description": "Checks for .times.map calls.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_BeginBlock",
    "title": "Avoid the use of BEGIN blocks.",
    "description": "Avoid the use of BEGIN blocks.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantException",
    "title": "Checks for an obsolete RuntimeException argument in raise/fail.",
    "description": "Checks for an obsolete RuntimeException argument in raise/fail.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_UnneededCapitalW",
    "title": "Checks for %W when interpolation is not needed.",
    "description": "Checks for %W when interpolation is not needed.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RequireParentheses",
    "title": "Use parentheses in the method call to avoid confusion about precedence.",
    "description": "Use parentheses in the method call to avoid confusion about precedence.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_UnneededInterpolation",
    "title": "Checks for strings that are just an interpolated expression.",
    "description": "Checks for strings that are just an interpolated expression.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_DeprecatedClassMethods",
    "title": "Check for deprecated class method calls.",
    "description": "Check for deprecated class method calls.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Attr",
    "title": "Checks for uses of Module#attr.",
    "description": "Checks for uses of Module#attr.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_IdenticalConditionalBranches",
    "title": "Checks that conditional statements do not have an identical line at the end of each branch, which can validly be moved out of the conditional.",
    "description": "Checks that conditional statements do not have an identical line at the end of each branch, which can validly be moved out of the conditional.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_EachWithObjectArgument",
    "title": "Check for immutable argument given to each_with_object.",
    "description": "Check for immutable argument given to each_with_object.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_IfInsideElse",
    "title": "Finds if nodes inside else, which can be converted to elsif.",
    "description": "Finds if nodes inside else, which can be converted to elsif.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceInsidePercentLiteralDelimiters",
    "title": "No unnecessary spaces inside delimiters of %i/%w/%x literals.",
    "description": "No unnecessary spaces inside delimiters of %i/%w/%x literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_FloatOutOfRange",
    "title": "Catches floating-point literals too large or small for Ruby to represent.",
    "description": "Catches floating-point literals too large or small for Ruby to represent.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UnderscorePrefixedVariableName",
    "title": "Do not use prefix `_` for a variable that is used.",
    "description": "Do not use prefix `_` for a variable that is used.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_DoubleNegation",
    "title": "Checks for uses of double negation (!!).",
    "description": "Checks for uses of double negation (!!).",
    "timeToFix": 5
  },
  {
    "patternId": "Style_VariableInterpolation",
    "title": "Don't interpolate global, instance and class variables directly in strings.",
    "description": "Don't interpolate global, instance and class variables directly in strings.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantFreeze",
    "title": "Checks usages of Object#freeze on immutable objects.",
    "description": "Checks usages of Object#freeze on immutable objects.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ConstantName",
    "title": "Constants should use SCREAMING_SNAKE_CASE.",
    "description": "Constants should use SCREAMING_SNAKE_CASE.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MethodCalledOnDoEndBlock",
    "title": "Avoid chaining a method call on a do...end block.",
    "description": "Avoid chaining a method call on a do...end block.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_InvalidCharacterLiteral",
    "title": "Checks for invalid character literals with a non-escaped whitespace character.",
    "description": "Checks for invalid character literals with a non-escaped whitespace character.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_AccessorMethodName",
    "title": "Check the naming of accessor methods for get_/set_.",
    "description": "Check the naming of accessor methods for get_/set_.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_StringConversionInInterpolation",
    "title": "Checks for Object#to_s usage in string interpolation.",
    "description": "Checks for Object#to_s usage in string interpolation.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MultipleComparison",
    "title": "Avoid comparing a variable with multiple items in a conditional, use Array#include? instead.",
    "description": "Avoid comparing a variable with multiple items in a conditional, use Array#include? instead.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Proc",
    "title": "Use proc instead of Proc.new.",
    "description": "Use proc instead of Proc.new.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_RangeInclude",
    "title": "Use `Range#cover?` instead of `Range#include?`.",
    "description": "Use `Range#cover?` instead of `Range#include?`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NegatedWhile",
    "title": "Favor until over while for negative conditions.",
    "description": "Favor until over while for negative conditions.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_StringReplacement",
    "title": "Use `tr` instead of `gsub` when you are replacing the same number of characters. Use `delete` instead of `gsub` when you are deleting characters.",
    "description": "Use `tr` instead of `gsub` when you are replacing the same number of characters. Use `delete` instead of `gsub` when you are deleting characters.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_AsciiComments",
    "title": "Use only ascii symbols in comments.",
    "description": "Use only ascii symbols in comments.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_EmptyEnsure",
    "title": "Checks for empty ensure block.",
    "description": "Checks for empty ensure block.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ElseLayout",
    "title": "Check for odd code arrangement in an else block.",
    "description": "Check for odd code arrangement in an else block.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLinesAroundMethodBody",
    "title": "Keeps track of empty lines around method bodies.",
    "description": "Keeps track of empty lines around method bodies.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_HashEachMethods",
    "title": "Use `Hash#each_key` and `Hash#each_value` instead of `Hash#keys.each` and `Hash#values.each`.",
    "description": "Use `Hash#each_key` and `Hash#each_value` instead of `Hash#keys.each` and `Hash#values.each`.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_ClosingParenthesisIndentation",
    "title": "Checks the indentation of hanging closing parentheses.",
    "description": "Checks the indentation of hanging closing parentheses.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_RedundantSortBy",
    "title": "Use `sort` instead of `sort_by { |x| x }`.",
    "description": "Use `sort` instead of `sort_by { |x| x }`.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_Void",
    "title": "Possible use of operator/literal/variable in void context.",
    "description": "Possible use of operator/literal/variable in void context.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Documentation",
    "title": "Document classes and non-namespace modules.",
    "description": "Document classes and non-namespace modules.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Exclude",
        "description": "List of files to be ignored by this pattern"
      }
    ]
  },
  {
    "patternId": "Lint_EnsureReturn",
    "title": "Do not use return in an ensure block.",
    "description": "Do not use return in an ensure block.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_ElseAlignment",
    "title": "Align elses and elsifs correctly.",
    "description": "Align elses and elsifs correctly.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_LiteralInInterpolation",
    "title": "Checks for literals used in interpolation.",
    "description": "Checks for literals used in interpolation.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ParallelAssignment",
    "title": "Check for simple usages of parallel assignment. It will only warn when the number of variables matches on both sides of the assignment.",
    "description": "Check for simple usages of parallel assignment. It will only warn when the number of variables matches on both sides of the assignment.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ScriptPermission",
    "title": "Grant script file execute permission.",
    "description": "Grant script file execute permission.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_AsciiIdentifiers",
    "title": "Use only ascii symbols in identifiers.",
    "description": "Use only ascii symbols in identifiers.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_FlipFlop",
    "title": "Checks for flip flops",
    "description": "Checks for flip flops",
    "timeToFix": 5
  },
  {
    "patternId": "Style_AutoResourceCleanup",
    "title": "Suggests the usage of an auto resource cleanup version of a method (if available).",
    "description": "Suggests the usage of an auto resource cleanup version of a method (if available).",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_MultilineBlockLayout",
    "title": "Ensures newlines after multiline block do statements.",
    "description": "Ensures newlines after multiline block do statements.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EndBlock",
    "title": "Avoid the use of END blocks.",
    "description": "Avoid the use of END blocks.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_OutputSafety",
    "title": "The use of `html_safe` or `raw` may be a security risk.",
    "description": "The use of `html_safe` or `raw` may be a security risk.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EvenOdd",
    "title": "Favor the use of Integer#even? && Integer#odd?",
    "description": "Favor the use of Integer#even? && Integer#odd?",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ParenthesesAsGroupedExpression",
    "title": "Checks for method calls with a space before the opening parenthesis.",
    "description": "Checks for method calls with a space before the opening parenthesis.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceBeforeComment",
    "title": "Checks for missing space between code and a comment on the same line.",
    "description": "Checks for missing space between code and a comment on the same line.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceInsideRangeLiteral",
    "title": "No spaces inside range literals.",
    "description": "No spaces inside range literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_CompareWithBlock",
    "title": "Use `sort_by(&:foo)` instead of `sort_by { |a, b| a.foo <=> b.foo }`.",
    "description": "Use `sort_by(&:foo)` instead of `sort_by { |a, b| a.foo <=> b.foo }`.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLineAfterMagicComment",
    "title": "Add an empty line after magic comments to separate them from code.",
    "description": "Add an empty line after magic comments to separate them from code.",
    "timeToFix": 5
  },
  {
    "patternId": "Security_JSONLoad",
    "title": "Prefer usage of `JSON.parse` over `JSON.load` due to potential security issues. See reference for more information.",
    "description": "Prefer usage of `JSON.parse` over `JSON.load` due to potential security issues. See reference for more information.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_NestedMethodDefinition",
    "title": "Do not use nested method definitions.",
    "description": "Do not use nested method definitions.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_PercentStringArray",
    "title": "Checks for unwanted commas and quotes in %w/%W literals.",
    "description": "Checks for unwanted commas and quotes in %w/%W literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_HandleExceptions",
    "title": "Don't suppress exception.",
    "description": "Don't suppress exception.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_WhileUntilDo",
    "title": "Checks for redundant do after while or until.",
    "description": "Checks for redundant do after while or until.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_MultipleCompare",
    "title": "Use `&&` operator to compare multiple value.",
    "description": "Use `&&` operator to compare multiple value.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_LstripRstrip",
    "title": "Use `strip` instead of `lstrip.rstrip`.",
    "description": "Use `strip` instead of `lstrip.rstrip`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EachForSimpleLoop",
    "title": "Use `Integer#times` for a simple loop which iterates a fixed number of times.",
    "description": "Use `Integer#times` for a simple loop which iterates a fixed number of times.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_EmptyInterpolation",
    "title": "Checks for empty string interpolation.",
    "description": "Checks for empty string interpolation.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_Tab",
    "title": "No hard tabs.",
    "description": "No hard tabs.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_LeadingCommentSpace",
    "title": "Comments should start with a space.",
    "description": "Comments should start with a space.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAfterColon",
    "title": "Use spaces after colons.",
    "description": "Use spaces after colons.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_BlockEndNewline",
    "title": "Put end statement of multiline block on its own line.",
    "description": "Put end statement of multiline block on its own line.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_EmptyExpression",
    "title": "Checks for empty expressions.",
    "description": "Checks for empty expressions.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UselessComparison",
    "title": "Checks for comparison of something with itself.",
    "description": "Checks for comparison of something with itself.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_LiteralInCondition",
    "title": "Checks of literals used in conditions.",
    "description": "Checks of literals used in conditions.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MissingElse",
    "title": "Require if/case expressions to have an else branches. If enabled, it is recommended that Style/UnlessElse and Style/EmptyElse be enabled. This will conflict with Style/EmptyElse if Style/EmptyElse is configured to style \"both\"",
    "description": "Require if/case expressions to have an else branches. If enabled, it is recommended that Style/UnlessElse and Style/EmptyElse be enabled. This will conflict with Style/EmptyElse if Style/EmptyElse is configured to style \"both\"",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "The style you prefer to use when you use lambda calls [both, call, braces]"
      }
    ]
  },
  {
    "patternId": "Lint_UselessSetterCall",
    "title": "Checks for useless setter call to a local variable.",
    "description": "Checks for useless setter call to a local variable.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UnneededDisable",
    "title": "Checks for rubocop:disable comments that can be removed. Note: this cop is not disabled when disabling all cops. It must be explicitly disabled.",
    "description": "Checks for rubocop:disable comments that can be removed. Note: this cop is not disabled when disabling all cops. It must be explicitly disabled.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_InfiniteLoop",
    "title": "Use Kernel#loop for infinite loops.",
    "description": "Use Kernel#loop for infinite loops.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_LineEndConcatenation",
    "title": "Use \\ instead of + or << to concatenate two string literals at line end.",
    "description": "Use \\ instead of + or << to concatenate two string literals at line end.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLinesAroundAccessModifier",
    "title": "Keep blank lines around access modifiers.",
    "description": "Keep blank lines around access modifiers.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_Sample",
    "title": "Use `sample` instead of `shuffle.first`, `shuffle.last`, and `shuffle[Integer]`.",
    "description": "Use `sample` instead of `shuffle.first`, `shuffle.last`, and `shuffle[Integer]`.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_PluralizationGrammar",
    "title": "Checks for incorrect grammar when using methods like `3.day.ago`.",
    "description": "Checks for incorrect grammar when using methods like `3.day.ago`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MultilineIfModifier",
    "title": "Only use if/unless modifiers on single line statements.",
    "description": "Only use if/unless modifiers on single line statements.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAfterComma",
    "title": "Use spaces after commas.",
    "description": "Use spaces after commas.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantBegin",
    "title": "Don't use begin blocks when they are not needed.",
    "description": "Don't use begin blocks when they are not needed.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_NextWithoutAccumulator",
    "title": "Do not omit the accumulator when calling `next` in a `reduce`/`inject` block.",
    "description": "Do not omit the accumulator when calling `next` in a `reduce`/`inject` block.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UnneededSplatExpansion",
    "title": "Checks for splat unnecessarily being called on literals",
    "description": "Checks for splat unnecessarily being called on literals",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_StartWith",
    "title": "Use `start_with?` instead of a regex match anchored to the beginning of a string.",
    "description": "Use `start_with?` instead of a regex match anchored to the beginning of a string.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_ApplicationJob",
    "title": "Check that jobs subclass ApplicationJob.",
    "description": "Check that jobs subclass ApplicationJob.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EachWithObject",
    "title": "Prefer `each_with_object` over `inject` or `reduce`.",
    "description": "Prefer `each_with_object` over `inject` or `reduce`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_StructInheritance",
    "title": "Checks for inheritance from Struct.new.",
    "description": "Checks for inheritance from Struct.new.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ArrayJoin",
    "title": "Use Array#join instead of Array#*.",
    "description": "Use Array#join instead of Array#*.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_TrailingWhitespace",
    "title": "Avoid trailing whitespace.",
    "description": "Avoid trailing whitespace.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_RedundantMatch",
    "title": "Use `=~` instead of `String#match` or `Regexp#match` in a context where the returned `MatchData` is not needed.",
    "description": "Use `=~` instead of `String#match` or `Regexp#match` in a context where the returned `MatchData` is not needed.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_FirstHashElementLineBreak",
    "title": "Checks for a line break before the first element in a multi-line hash.",
    "description": "Checks for a line break before the first element in a multi-line hash.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_FormatParameterMismatch",
    "title": "The number of parameters to format/sprint must match the fields.",
    "description": "The number of parameters to format/sprint must match the fields.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NestedModifier",
    "title": "Avoid using nested modifiers.",
    "description": "Avoid using nested modifiers.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UselessElseWithoutRescue",
    "title": "Checks for useless `else` in `begin..end` without `rescue`.",
    "description": "Checks for useless `else` in `begin..end` without `rescue`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ClassAndModuleCamelCase",
    "title": "Use CamelCase for classes and modules.",
    "description": "Use CamelCase for classes and modules.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_Caller",
    "title": "Use `caller(n..n)` instead of `caller`.",
    "description": "Use `caller(n..n)` instead of `caller`.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceInsideArrayPercentLiteral",
    "title": "No unnecessary additional spaces between elements in %i/%w literals.",
    "description": "No unnecessary additional spaces between elements in %i/%w literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_Detect",
    "title": "Use `detect` instead of `select.first`, `find_all.first`, `select.last`, and `find_all.last`.",
    "description": "Use `detect` instead of `select.first`, `find_all.first`, `select.last`, and `find_all.last`.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RescueType",
    "title": "Avoid rescuing from non constants that could result in a `TypeError`.",
    "description": "Avoid rescuing from non constants that could result in a `TypeError`.",
    "timeToFix": 5
  },
  {
    "patternId": "Bundler_DuplicatedGem",
    "title": "Checks for duplicate gem entries in Gemfile.",
    "description": "Checks for duplicate gem entries in Gemfile.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "List of files to be included"
      }
    ]
  },
  {
    "patternId": "Lint_DuplicateCaseCondition",
    "title": "Do not repeat values in case conditionals.",
    "description": "Do not repeat values in case conditionals.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_Debugger",
    "title": "Check for debugger calls.",
    "description": "Check for debugger calls.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLinesAroundExceptionHandlingKeywords",
    "title": "Keeps track of empty lines around exception handling keywords.",
    "description": "Keeps track of empty lines around exception handling keywords.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Send",
    "title": "Prefer `Object#__send__` or `Object#public_send` to `send`, as `send` may overlap with existing methods.",
    "description": "Prefer `Object#__send__` or `Object#public_send` to `send`, as `send` may overlap with existing methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_InitialIndentation",
    "title": "Checks the indentation of the first non-blank non-comment line in a file.",
    "description": "Checks the indentation of the first non-blank non-comment line in a file.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_SaveBang",
    "title": "Identifies possible cases where Active Record save! or related should be used.",
    "description": "Identifies possible cases where Active Record save! or related should be used.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLines",
    "title": "Don't use several empty lines in a row.",
    "description": "Don't use several empty lines in a row.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ShadowedException",
    "title": "Avoid rescuing a higher level exception before a lower level exception.",
    "description": "Avoid rescuing a higher level exception before a lower level exception.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantSelf",
    "title": "Don't use self where it's not needed.",
    "description": "Don't use self where it's not needed.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NestedTernaryOperator",
    "title": "Use one expression per branch in a ternary operator.",
    "description": "Use one expression per branch in a ternary operator.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_NonLocalExitFromIterator",
    "title": "Do not use return in iterator to cause non-local exit.",
    "description": "Do not use return in iterator to cause non-local exit.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ClassMethods",
    "title": "Use self when defining module/class methods.",
    "description": "Use self when defining module/class methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NestedParenthesizedCalls",
    "title": "Parenthesize method calls which are nested inside the argument list of another parenthesized method call.",
    "description": "Parenthesize method calls which are nested inside the argument list of another parenthesized method call.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_AmbiguousBlockAssociation",
    "title": "Checks for ambiguous block association with method when param passed without parentheses.",
    "description": "Checks for ambiguous block association with method when param passed without parentheses.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_SelfAssignment",
    "title": "Checks for places where self-assignment shorthand should have been used.",
    "description": "Checks for places where self-assignment shorthand should have been used.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_UnneededPercentQ",
    "title": "Checks for %q/%Q when single quotes or double quotes would do.",
    "description": "Checks for %q/%Q when single quotes or double quotes would do.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAroundKeyword",
    "title": "Use a space around keywords if appropriate.",
    "description": "Use a space around keywords if appropriate.",
    "timeToFix": 5
  },
  {
    "patternId": "Security_Eval",
    "title": "The use of eval represents a serious security risk.",
    "description": "The use of eval represents a serious security risk.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UselessAssignment",
    "title": "Checks for useless assignment to a local variable.",
    "description": "Checks for useless assignment to a local variable.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RescueException",
    "title": "Avoid rescuing the Exception class.",
    "description": "Avoid rescuing the Exception class.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_IfWithSemicolon",
    "title": "Do not use if x; .... Use the ternary operator instead.",
    "description": "Do not use if x; .... Use the ternary operator instead.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_RescueEnsureAlignment",
    "title": "Align rescues and ensures correctly.",
    "description": "Align rescues and ensures correctly.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_Count",
    "title": "Use `count` instead of `select...size`, `reject...size`, `select...count`, `reject...count`, `select...length`, and `reject...length`.",
    "description": "Use `count` instead of `select...size`, `reject...size`, `select...count`, `reject...count`, `select...length`, and `reject...length`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_TrailingUnderscoreVariable",
    "title": "Checks for the usage of unneeded trailing underscores at the end of parallel variable assignment.",
    "description": "Checks for the usage of unneeded trailing underscores at the end of parallel variable assignment.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_PercentSymbolArray",
    "title": "Checks for unwanted commas and colons in %i/%I literals.",
    "description": "Checks for unwanted commas and colons in %i/%I literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ImplicitStringConcatenation",
    "title": "Checks for adjacent string literals on the same line, which could better be represented as a single string literal.",
    "description": "Checks for adjacent string literals on the same line, which could better be represented as a single string literal.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_IneffectiveAccessModifier",
    "title": "Checks for attempts to use `private` or `protected` to set the visibility of a class method, which does not work.",
    "description": "Checks for attempts to use `private` or `protected` to set the visibility of a class method, which does not work.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_RegexpMatch",
    "title": "Use `match?` instead of `Regexp#match`, `String#match`, `Symbol#match`, `Regexp#===`, or `=~` when `MatchData` is not used.",
    "description": "Use `match?` instead of `Regexp#match`, `String#match`, `Symbol#match`, `Regexp#===`, or `=~` when `MatchData` is not used.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_FlatMap",
    "title": "Use `Enumerable#flat_map` instead of `Enumerable#map...Array#flatten(1)` or `Enumberable#collect..Array#flatten(1)`",
    "description": "Use `Enumerable#flat_map` instead of `Enumerable#map...Array#flatten(1)` or `Enumberable#collect..Array#flatten(1)`",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ShadowingOuterLocalVariable",
    "title": "Do not use the same name as outer local variable for block arguments or block local variables.",
    "description": "Do not use the same name as outer local variable for block arguments or block local variables.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_BlockComments",
    "title": "Do not use block comments.",
    "description": "Do not use block comments.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_SymbolLiteral",
    "title": "Use plain symbols instead of string symbols when possible.",
    "description": "Use plain symbols instead of string symbols when possible.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_CaseWhenSplat",
    "title": "Place `when` conditions that use splat at the end of the list of `when` branches.",
    "description": "Place `when` conditions that use splat at the end of the list of `when` branches.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_CircularArgumentReference",
    "title": "Default values in optional keyword arguments and optional ordinal arguments should not refer back to the name of the argument.",
    "description": "Default values in optional keyword arguments and optional ordinal arguments should not refer back to the name of the argument.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_InlineComment",
    "title": "Avoid trailing inline comments.",
    "description": "Avoid trailing inline comments.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_ApplicationRecord",
    "title": "Check that models subclass ApplicationRecord.",
    "description": "Check that models subclass ApplicationRecord.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_OptionalArguments",
    "title": "Checks for optional arguments that do not appear at the end of the argument list",
    "description": "Checks for optional arguments that do not appear at the end of the argument list",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAfterSemicolon",
    "title": "Use spaces after semicolons.",
    "description": "Use spaces after semicolons.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NilComparison",
    "title": "Prefer x.nil? to x == nil.",
    "description": "Prefer x.nil? to x == nil.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_FirstArrayElementLineBreak",
    "title": "Checks for a line break before the first element in a multi-line array.",
    "description": "Checks for a line break before the first element in a multi-line array.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_Delegate",
    "title": "Prefer delegate method for delegations.",
    "description": "Prefer delegate method for delegations.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_AlignArray",
    "title": "Align the elements of an array literal if they span more than one line.",
    "description": "Align the elements of an array literal if they span more than one line.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MethodCallWithoutArgsParentheses",
    "title": "Do not use parentheses for method calls with no arguments.",
    "description": "Do not use parentheses for method calls with no arguments.",
    "timeToFix": 5
  },
  {
    "patternId": "Security_YAMLLoad",
    "title": "Prefer usage of `YAML.safe_load` over `YAML.load` due to potential security issues. See reference for more information.",
    "description": "Prefer usage of `YAML.safe_load` over `YAML.load` due to potential security issues. See reference for more information.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_HttpPositionalArguments",
    "title": "Use keyword arguments instead of positional arguments in http method calls.",
    "description": "Use keyword arguments instead of positional arguments in http method calls.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Include",
        "description": "List of files to be included"
      }
    ]
  },
  {
    "patternId": "Security_MarshalLoad",
    "title": "Avoid using of `Marshal.load` or `Marshal.restore` due to potential security issues. See reference for more information.",
    "description": "Avoid using of `Marshal.load` or `Marshal.restore` due to potential security issues. See reference for more information.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_OpMethod",
    "title": "When defining binary operators, name the argument other.",
    "description": "When defining binary operators, name the argument other.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ImplicitRuntimeError",
    "title": "Use `raise` or `fail` with an explicit exception class and message, rather than just a message.",
    "description": "Use `raise` or `fail` with an explicit exception class and message, rather than just a message.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_Casecmp",
    "title": "Use `casecmp` rather than `downcase ==`, `upcase ==`, `== downcase`, or `== upcase`..",
    "description": "Use `casecmp` rather than `downcase ==`, `upcase ==`, `== downcase`, or `== upcase`..",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MethodMissing",
    "title": "Avoid using `method_missing`.",
    "description": "Avoid using `method_missing`.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceInsideParens",
    "title": "No spaces after ( or before ).",
    "description": "No spaces after ( or before ).",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_DelegateAllowBlank",
    "title": "Do not use allow_blank as an option to delegate.",
    "description": "Do not use allow_blank as an option to delegate.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_YodaCondition",
    "title": "Do not use literals as the first operand of a comparison.",
    "description": "Do not use literals as the first operand of a comparison.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_ReverseEach",
    "title": "Use `reverse_each` instead of `reverse.each`.",
    "description": "Use `reverse_each` instead of `reverse.each`.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAfterNot",
    "title": "Tracks redundant space after the ! operator.",
    "description": "Tracks redundant space after the ! operator.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_DuplicateMethods",
    "title": "Check for duplicate method definitions.",
    "description": "Check for duplicate method definitions.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_ActiveSupportAliases",
    "title": "Avoid ActiveSupport aliases of standard ruby methods: `String#starts_with?`, `String#ends_with?`, `Array#append`, `Array#prepend`.",
    "description": "Avoid ActiveSupport aliases of standard ruby methods: `String#starts_with?`, `String#ends_with?`, `Array#append`, `Array#prepend`.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_EmptyWhen",
    "title": "Checks for `when` branches with empty bodies.",
    "description": "Checks for `when` branches with empty bodies.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceInsideBrackets",
    "title": "No spaces after [ or before ].",
    "description": "No spaces after [ or before ].",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_AmbiguousOperator",
    "title": "Checks for ambiguous operators in the first argument of a method invocation without parentheses.",
    "description": "Checks for ambiguous operators in the first argument of a method invocation without parentheses.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MutableConstant",
    "title": "Do not assign mutable objects to constants.",
    "description": "Do not assign mutable objects to constants.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MultilineIfThen",
    "title": "Do not use then for multi-line if/unless.",
    "description": "Do not use then for multi-line if/unless.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UnifiedInteger",
    "title": "Use Integer instead of Fixnum or Bignum",
    "description": "Use Integer instead of Fixnum or Bignum",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UnreachableCode",
    "title": "Unreachable code.",
    "description": "Unreachable code.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceBeforeComma",
    "title": "No spaces before commas.",
    "description": "No spaces before commas.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_DefWithParentheses",
    "title": "Use def with parentheses when there are arguments.",
    "description": "Use def with parentheses when there are arguments.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MultilineBlockChain",
    "title": "Avoid multi-line chains of blocks.",
    "description": "Avoid multi-line chains of blocks.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_RelativeDateConstant",
    "title": "Do not assign relative date to constants.",
    "description": "Do not assign relative date to constants.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantParentheses",
    "title": "Checks for parentheses that seem not to serve any purpose.",
    "description": "Checks for parentheses that seem not to serve any purpose.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UselessAccessModifier",
    "title": "Checks for useless access modifiers.",
    "description": "Checks for useless access modifiers.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_WhenThen",
    "title": "Use when x then ... for one-line cases.",
    "description": "Use when x then ... for one-line cases.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_AmbiguousRegexpLiteral",
    "title": "Checks for ambiguous regexp literals in the first argument of a method invocation without parentheses.",
    "description": "Checks for ambiguous regexp literals in the first argument of a method invocation without parentheses.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Not",
    "title": "Use ! instead of not.",
    "description": "Use ! instead of not.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_FixedSize",
    "title": "Do not compute the size of statically sized objects except in constants",
    "description": "Do not compute the size of statically sized objects except in constants",
    "timeToFix": 5
  },
  {
    "patternId": "Style_CaseEquality",
    "title": "Avoid explicit use of the case equality operator(===).",
    "description": "Avoid explicit use of the case equality operator(===).",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_RedundantBlockCall",
    "title": "Use `yield` instead of `block.call`.",
    "description": "Use `yield` instead of `block.call`.",
    "timeToFix": 5
  }
]