[
  {
    "patternId": "Lint_AmbiguousOperator",
    "title": "Ambiguous Operator",
    "description": "Checks for ambiguous operators in the first argument of a method invocation without parentheses",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_AmbiguousRegexpLiteral",
    "title": "Ambiguous Regexp Literal",
    "description": "Checks for ambiguous regexp literals in thge first argument of a method invocation without parentheses.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_AssignmentInCondition",
    "title": "Assignment in Condition",
    "description": "Checks for assignments in the conditions of if/while/until",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowSafeAssignment",
        "description": "putting parentheses around assignment to indicate that it actually is your intention to assign the value to a variable"
      }
    ]
  },
  {
    "patternId": "Style_VariableName",
    "title": "Variable Name",
    "description": "Variables can only be camel cased or snake cased",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "This enforces you to use only one type for all of your files"
      },
      {
        "name": "SupportedStyles",
        "description": "Specifies the supported variable styles"
      }
    ]
  },
  {
    "patternId": "Lint_ConditionPosition",
    "title": "Condition Position",
    "description": "Checks for conditions that are not on the same line as if/while/until",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_DuplicateMethods",
    "title": "Duplicate Methods",
    "description": "Checks for duplicate methods in classes and modules",
    "timeToFix": 10
  },
  {
    "patternId": "Lint_EachWithObjectArgument",
    "title": "Each With Object Argument",
    "description": "Checks if each_with_object receives an immutable argument",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ElseLayout",
    "title": "Else Layout",
    "description": "Checks for odd else block layout",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_EmptyEnsure",
    "title": "Empty Ensure",
    "description": "Checks for empty ensure blocks",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_EmptyInterpolation",
    "title": "Empty Interpolation",
    "description": "Checks for empty interpolations",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_Eval",
    "title": "Eval Usage",
    "description": "Checks for eval usage",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_LiteralInCondition",
    "title": "Literal in Condition",
    "description": "Checks if there are any literals inside a condition",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_LiteralInInterpolation",
    "title": "Literal in Interpolation",
    "description": "Checks if there are any literals inside a interpolation",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_Loop",
    "title": "Looping preferences",
    "description": "Enforces the use of Kernel#Loop instead of begin/end/until||while statements",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_NestedMethodDefinition",
    "title": "Nested method definitions",
    "description": "Checks for nested method definitions",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ParenthesesAsGroupedExpression",
    "title": "Parentheses As Grouped Expression",
    "description": "Checks for a space between the name of a called method and a left parenthesis",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RequireParentheses",
    "title": "Require Parentheses",
    "description": "Checks for expressions where there is a call to a predicate method with at least one argument",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RescueException",
    "title": "Rescue Parentheses",
    "description": "Checks for calls to Exception when using rescue",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ShadowingOuterLocalVariable",
    "title": "Shadowing Outer Local Variable",
    "description": "Checks for the use of the same name as outer local variables for block arguments or block variables",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_SpaceBeforeFirstArg",
    "title": "Space Before First Argument",
    "description": "Checks if there is a space between the first argument and the method call without parentheses",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_StringConversionInInterpolation",
    "title": "String Conversion In Interpolation",
    "description": "Checks for redundant string interpolation",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UnderscorePrefixedVariableName",
    "title": "Underscore Prefixed Variable Name",
    "description": "Checks for used variables that are prefixed with the character '_'",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UnreachableCode",
    "title": "Unreachable Code",
    "description": "Checks for unreachable code",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UnusedBlockArgument",
    "title": "Unused Block Argument",
    "description": "Checks for unused argument inside a code block",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UnusedMethodArgument",
    "title": "Unused Method Argument",
    "description": "Checks for unused arguments on a method",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UselessAccessModifier",
    "title": "Useless Access Modifier",
    "description": "Checks for access modifiers without any code",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UselessAssignment",
    "title": "Useless Assignment",
    "description": "Checks for useless assignment to local variable ion every scope",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UselessComparison",
    "title": "Useless Comparison",
    "description": "Checks for comparison of something with itself",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UselessElseWithoutRescue",
    "title": "Useless Else Without Rescue",
    "description": "Checks for useless else in begin..end without rescue",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UselessSetterCall",
    "title": "Useless Setter Call",
    "description": "Checks for useless setter call to local variable as the final expression of a function",
    "timeToFix": 5
  },
  {
    "patternId": "Metrics_AbcSize",
    "title": "Abc Size",
    "description": "Checks the length of a function to see if it is not too long",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "Max",
        "description": "Maximum value that a method can have"
      }
    ]
  },
  {
    "patternId": "Metrics_BlockNesting",
    "title": "Block Nesting",
    "description": "Checks the number of blocks nested in a function",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "Max",
        "description": "Maximum value that a method can have of nested blocks"
      }
    ]
  },
  {
    "patternId": "Metrics_ClassLength",
    "title": "Class Length",
    "description": "Checks the length of a class",
    "timeToFix": 20,
    "parameters": [
      {
        "name": "CountComments",
        "description": "Enables the possibility to count comments also"
      },
      {
        "name": "Max",
        "description": "Maximum value that for the length of a class"
      }
    ]
  },
  {
    "patternId": "Metrics_CyclomaticComplexity",
    "title": "Cyclomatic Complexity",
    "description": "Checks the cyclomatic complexity of a method",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "Max",
        "description": "Maximum value for the cyclomatic complexity property"
      }
    ]
  },
  {
    "patternId": "Metrics_LineLength",
    "title": "Line Length",
    "description": "Checks the Length of a Line",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Max",
        "description": "Max number of characters supported per line"
      },
      {
        "name": "AllowURI",
        "description": "Allow URI's"
      },
      {
        "name": "URISchemes",
        "description": "URI Schemes that are supported"
      }
    ]
  },
  {
    "patternId": "Metrics_MethodLength",
    "title": "Method Length",
    "description": "Checks the length of a method",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "CountComments",
        "description": "Includes comments in the counting of lines inside the method"
      },
      {
        "name": "Max",
        "description": "Maximum number of lines for each method"
      }
    ]
  },
  {
    "patternId": "Metrics_ModuleLength",
    "title": "Module Length",
    "description": "Checks the length of a module",
    "timeToFix": 20,
    "parameters": [
      {
        "name": "CountComments",
        "description": "Includes comments in the counting of the module length"
      },
      {
        "name": "Max",
        "description": "Maximum number of lines the a module can have"
      }
    ]
  },
  {
    "patternId": "Metrics_ParameterLists",
    "title": "Parameter Lists",
    "description": "Checks the length of the number of arguments a method takes",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "Max",
        "description": "Maximum number of arguments a method can take"
      },
      {
        "name": "CountKeyArgs",
        "description": "Includes args on the counting of the number of arguments"
      }
    ]
  },
  {
    "patternId": "Metrics_PerceivedComplexity",
    "title": "Perceived Complexity",
    "description": "Checks the perceived complexity of your methods",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "Max",
        "description": "Maximum number of perceived complexity you can get"
      }
    ]
  },
  {
    "patternId": "Performance_Count",
    "title": "Performance Count Usage",
    "description": "Identify usage of count on an Enumerable and change them to size",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_Detect",
    "title": "Performance Detect Usage",
    "description": "Identify the usage of first and last and change them to detect instead",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_FlatMap",
    "title": "Change to FlatMap to Increase Performance",
    "description": "Increase performance by changing map.flatten with flat_map",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_ReverseEach",
    "title": "Performance of Reverse Each",
    "description": "Choose reverse_each over reverse.each",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_Sample",
    "title": "Performance of Sample",
    "description": "Choose sample over shuffle",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_Size",
    "title": "Performance Size",
    "description": "Choose size over count",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_Date",
    "title": "Rails Date",
    "description": "Choose Time over Date",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "Style used by the pattern"
      },
      {
        "name": "SupportedStyles",
        "description": "Styles supported by the pattern"
      }
    ]
  },
  {
    "patternId": "Rails_Delegate",
    "title": "Rails Delegate",
    "description": "Enforces the use of delegation method",
    "timeToFix": 5
  },
  {
    "patternId": "Style_AccessModifierIndentation",
    "title": "Access Modifier Indentation",
    "description": "Enforces the right indentation of the access modifier",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "Style used by the pattern"
      },
      {
        "name": "SupportedStyles",
        "description": "Supported styles by the pattern"
      }
    ]
  },
  {
    "patternId": "Style_AccessorMethodName",
    "title": "Accessor Method Naming",
    "description": "Enforces the usage of the conventions for accessor methods in ruby",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Alias",
    "title": "Alias",
    "description": "Enforces the use of alias_method instead of alias",
    "timeToFix": 5
  },
  {
    "patternId": "Style_AlignArray",
    "title": "Array Alignment",
    "description": "Enforces the correct alignment of a multiline array",
    "timeToFix": 5
  },
  {
    "patternId": "Style_AlignHash",
    "title": "Hash Alignment",
    "description": "Enforces the correct alignment of a multiline hash",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedHashRocketStyle",
        "description": "Enforces the use of RocketStyle"
      },
      {
        "name": "EnforcedColonStyle",
        "description": "Enforces the use of ColonStyle"
      },
      {
        "name": "EnforcedLastArgumentStyle",
        "description": "Enforces the use of LastArgumentStyle"
      },
      {
        "name": "EnforcedLastArgumentHashStyle",
        "description": "Enforces the use of ArgumentHashStyle"
      },
      {
        "name": "SupportedLastArgumentHashStyles",
        "description": "Supported Styles for the pattern"
      }
    ]
  },
  {
    "patternId": "Style_AlignParameters",
    "title": "Parameter Alignment",
    "description": "Enforces the alignment of the parameters when calling a method",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "Style enforced by the pattern"
      },
      {
        "name": "SupportedStyles",
        "description": "Supported styles by the pattern"
      }
    ]
  },
  {
    "patternId": "Style_AndOr",
    "title": "And and Or",
    "description": "Enforces the use of && and || instead of and and or",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "Style being enforced by the pattern"
      },
      {
        "name": "SupportedStyles",
        "description": "Styles supported by the pattern"
      }
    ]
  },
  {
    "patternId": "Style_ArrayJoin",
    "title": "Array#join over Array#*",
    "description": "Enforces the usage of Array#join instead of Array#*",
    "timeToFix": 5
  },
  {
    "patternId": "Style_AsciiComments",
    "title": "Ascii Comments",
    "description": "Enforces the use of ascii characters when writing comments",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Attr",
    "title": "Attr_reader over Attr",
    "description": "Enforces the usage of attr_reader instead of attr"
  },
  {
    "patternId": "Style_AutoResourceCleanup",
    "title": "Auto Resource Cleanup",
    "description": "Checks for cases when you could use a block accepting version of a method that does automatic resource cleanup",
    "timeToFix": 5
  },
  {
    "patternId": "Style_BarePercentLiterals",
    "title": "Bare Percent Literal Usage",
    "description": "Enforces the usage of bare percent literals instead of %Q",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "Style enforced by the pattern"
      },
      {
        "name": "SupportedStyles",
        "description": "Styles supported by the pattern"
      }
    ]
  },
  {
    "patternId": "Style_BeginBlock",
    "title": "Begin Block",
    "description": "Avoid using BEGIN Block",
    "timeToFix": 5
  },
  {
    "patternId": "Style_BlockEndNewline",
    "title": "End Block Newline",
    "description": "Enforces the end block to be on a newline",
    "timeToFix": 5
  },
  {
    "patternId": "Style_BracesAroundHashParameters",
    "title": "Braces Around Hash Parameters",
    "description": "If the last parameter passed to a method is a hash don't use braces",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "Style enforced by the pattern"
      },
      {
        "name": "SupportedStyles",
        "description": "Styles supported by the pattern"
      }
    ]
  },
  {
    "patternId": "Style_CaseEquality",
    "title": "Case Equality usage",
    "description": "Avoid the usage of === operator",
    "timeToFix": 5
  },
  {
    "patternId": "Style_CaseIndentation",
    "title": "Case Indentation",
    "description": "Indent the when keyword with the case keyword",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "IndentWhenRelativeTo",
        "description": "Defines the position of the indentation"
      },
      {
        "name": "SupportedStyles",
        "description": "Styles supported by the pattern"
      }
    ]
  },
  {
    "patternId": "Style_CharacterLiteral",
    "title": "Character Literal",
    "description": "Prohibits the use of Character Literals",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ClassAndModuleCamelCase",
    "title": "Class And Module Camel Case",
    "description": "Prohibits the use of snake_case on naming classes and modules",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ClassAndModuleChildren",
    "title": "Class and Module Children Style",
    "description": "Enforces a style to class and module children",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "Style enforced by the pattern"
      },
      {
        "name": "SupportedStyles",
        "description": "Styles supported by the pattern"
      }
    ]
  },
  {
    "patternId": "Style_ClassCheck",
    "title": "Class Check method",
    "description": "Enforces the use of only one class check method",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "Style Supported by the pattern"
      },
      {
        "name": "SuppoortedStyles",
        "description": "Supported Styles by the pattern"
      }
    ]
  },
  {
    "patternId": "Style_ClassMethods",
    "title": "Class Methods",
    "description": "Enforces the use of self instead of using the class/module name when defining methods",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ClassVars",
    "title": "Class variables usage",
    "description": "Prohibits the usage of class variables",
    "timeToFix": 10
  },
  {
    "patternId": "Style_ClosingParenthesisIndentation",
    "title": "Closing Parenthesis Indentation",
    "description": "Enforces the fixing of the indentation of parenthesis",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ColonMethodCall",
    "title": "Colon Method usage for Method calls",
    "description": "Prohibits the calling of method with colon",
    "timeToFix": 5
  },
  {
    "patternId": "Style_CommandLiteral",
    "title": "Command Literals",
    "description": "Enforces the usage of only one Command Literal",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "Style supported by the pattern"
      },
      {
        "name": "SupportedStyles",
        "description": "Styles supported by the pattern"
      }
    ]
  },
  {
    "patternId": "Style_CommentAnnotation",
    "title": "Comment Annotations",
    "description": "Enforces the conventions for comment annotations",
    "timeToFix": 5,
    "parameters":  [
      {
        "name": "Keywords",
        "description": "Words used by the annotations"
      }
    ]
  },
  {
    "patternId": "Style_ConstantName",
    "title": "Constant Naming",
    "description": "Enforces good practices on constant naming",
    "timeToFix": 10
  },
  {
    "patternId": "Style_DefWithParentheses",
    "title": "Def With Parenthesis",
    "description": "Enforces the use of parenthesis when defining a method the has parameters",
    "timeToFix": 5
  },
  {
    "patternId": "Style_DeprecatedHashMethods",
    "title": "Deprecated Hash Method Used",
    "description": "Prohibits the usage of deprecated hash methods like has_key or has_value",
    "timeToFix": 5
  },
  {
    "patternId": "Style_DotPosition",
    "title": "Dot Position",
    "description": "Enforces the dot position",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "Style enforced by the pattern"
      },
      {
        "name": "SupportedStyles",
        "description": "Styles supported by the pattern"
      }
    ]
  },
  {
    "patternId": "Style_DoubleNegation",
    "title": "Double Negation",
    "description": "Prohibits the usage of Double Negation",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EachWithObject",
    "title": "Each With Object Usage",
    "description": "Enforces the usage of Each With Object",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EmptyElse",
    "title": "Empty Else",
    "description": "Enforces the removal of the empty else since it is redundant",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EmptyLineBetweenDefs",
    "title": "Empty Line Between Defs",
    "description": "Enforces the use of a one line space between each method definition",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "AllowAdjacentOneLineDefs",
        "description": "Allow adjecent one line method definitions"
      }
    ]
  },
  {
    "patternId": "Style_EmptyLines",
    "title": "Empty Lines",
    "description": "Prohibits the existence of 2 empty lines in a row",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EmptyLinesAroundAccessModifier",
    "title": "Empty Lines Around Access Modifier",
    "description": "Enforces The ExistenceEmpty Lines Around Access Modifier",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EmptyLinesAroundBlockBody",
    "title": "Empty Lines Around Block Body",
    "description": "Prohibits the existence of empty lines around block bodies",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "Style enforced by the pattern"
      },
      {
        "name": "SupportedStyles",
        "description": "Styles supported by the pattern"
      }
    ]
  },
  {
    "patternId": "Style_EmptyLiteral",
    "title": "Empty Literal",
    "description": "Enforces the use of literals over class constructors",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Encoding",
    "title": "Encoding",
    "description": "Enforces the use of UTF-8 encoding",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "Style Enforced by the pattern"
      },
      {
        "name": "SupportedStyles",
        "description": "Styles supported by the pattern"
      }
    ]
  },
  {
    "patternId": "Style_EndBlock",
    "title": "End Block usage",
    "description": "Prohibits the use of END block",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EvenOdd",
    "title": "Even Odd proper checking",
    "description": "Enforces the right codeStyle for checking if a number is odd",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ExtraSpacing",
    "title": "Extra Spacing in a line",
    "description": "Enforces the checking of the number of spaces in a line",
    "timeToFix": 5
  },
  {
    "patternId": "Style_FirstParameterIndentation",
    "title": "First Parameter Indentation",
    "description": "Enforces the right CodeStyle for the first parameter",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "Style Enforced by the pattern"
      },
      {
        "name": "SupportedStyles",
        "description": "Styles supported by the pattern"
      }
    ]
  },
  {
    "patternId": "Style_FlipFlop",
    "title": "Flip Flop usage",
    "description": "Prohibits the use of Flip Flops",
    "timeToFix": 5
  },
  {
    "patternId": "Style_For",
    "title": "For usage",
    "description": "Prohibits the usage of for keyword",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "Style Enforced by the pattern"
      },
      {
        "name": "SupportedStyles",
        "description": "Styles supported by the pattern"
      }
    ]
  },
  {
    "patternId": "Style_FormatString",
    "title": "Format String",
    "description": "Enforces the proper CodeStyle to format a string",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "Style Enforced by the pattern"
      },
      {
        "name": "SupportedStyles",
        "description": "Styles supported by the pattern"
      }
    ]
  },
  {
    "patternId": "Style_GlobalVars",
    "title": "Global Variables usage",
    "description": "Prohibits the usage of Global Variables",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "AllowedVariables",
        "description": "Variables that are allowed by the pattern"
      }
    ]
  },
  {
    "patternId": "Style_GuardClause",
    "title": "Guard Clause",
    "description": "Enforces the use of Guard Clauses",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "MinBodyLength",
        "description": "Minimum length of the body"
      }
    ]
  },
  {
    "patternId": "Style_HashSyntax",
    "title": "Hash Syntax",
    "description": "Enforces the right codestyle for hashes",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "Style Enforced by the pattern"
      },
      {
        "name": "SupportedStyles",
        "description": "Styles supported by the pattern"
      }
    ]
  },
  {
    "patternId": "Style_IfUnlessModifier",
    "title": "Info/Unless Modifier",
    "description": "Refactors if and unless conditions",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "MaxLineLength",
        "description": "Maximum length of the line"
      }
    ]
  },
  {
    "patternId": "Style_IfWithSemicolon",
    "title": "If with Semicolon usage",
    "description": "Prohibits the usage of semicolons in if statements",
    "timeToFix": 5
  },
  {
    "patternId": "Style_IndentArray",
    "title": "Array Indentation",
    "description": "Enforces the right codestyle for array indentation",
    "timeToFix": 5
  },
  {
    "patternId": "Style_IndentHash",
    "title": "Hash Indentation",
    "description": "Enforces the right codestyle for hash indentation",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "Style Enforced by the pattern"
      },
      {
        "name": "SupportedStyles",
        "description": "Styles supported by the pattern"
      }
    ]
  },
  {
    "patternId": "Style_IndentationConsistency",
    "title": "Indentation Consistency",
    "description": "Enforces a consistent indentation",
    "timeToFix": 5
  },
  {
    "patternId": "Style_IndentationWidth",
    "title": "Indentation Width",
    "description": "Enforces the right width for your indentation",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "Width",
        "description": "Width of the indentation that is enabled"
      }
    ]
  },
  {
    "patternId": "Style_InfiniteLoop",
    "title": "Infinite Loop",
    "description": "Enforces the usage of Loop do instead of while true for infinite loop",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Lambda",
    "title": "Lambda usage",
    "description": "Enforces the right codestyle for lambda usage",
    "timeToFix": 5
  },
  {
    "patternId": "Style_LineEndConcatenation",
    "title": "Line End Concatenation",
    "description": "Enforces the codestyle for concatenating strings on end line",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MethodCallParentheses",
    "title": "Method Call Parentheses",
    "description": "Prohibits the usage of parentheses on methods with no parameters",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MethodCalledOnDoEndBlock",
    "title": "Method Called On Do End Block",
    "description": "Prohibits method calling on do end block",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MethodDefParentheses",
    "title": "Method def parentheses",
    "description": "Enforces the use of parentheses on a method definition with parameters",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "Style Enforced by the pattern"
      },
      {
        "name": "SupportedStyles",
        "description": "Styles supported by the pattern"
      }
    ]
  },
  {
    "patternId": "Style_MethodName",
    "title": "Method Name",
    "description": "Enforces the right naming for your methods",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "Style Enforced by the pattern"
      },
      {
        "name": "SupportedStyles",
        "description": "Styles supported by the pattern"
      }
    ]
  },
  {
    "patternId": "Style_ModuleFunction",
    "title": "Module Function",
    "description": "Prohibits the usage of extend self and favors module_function instead",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MultilineBlockChain",
    "title": "Multiline Block Chain",
    "description": "Avoid multi-line chain blocks usage",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MultilineBlockLayout",
    "title": "Multiline Block Layout",
    "description": "Enforces a layout on multiline blocks",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MultilineIfThen",
    "title": "Multiline If Then",
    "description": "Prohibits the use of multiline if then",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MultilineOperationIndentation",
    "title": "Multiline Operation Indentation",
    "description": "Enforces the right indentation for multiline operations",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "EnforcedStyle",
        "description": "Style Enforced by the pattern"
      },
      {
        "name": "SupportedStyles",
        "description": "Styles supported by the pattern"
      }
    ]
  }
]