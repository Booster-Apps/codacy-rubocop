[
  {
    "patternId": "Migration_DepartmentName",
    "title": "Check that cop names in rubocop:disable (etc) comments are given with department name.",
    "description": "Check that cop names in rubocop:disable (etc) comments are given with department name.",
    "timeToFix": 5
  },
  {
    "patternId": "Bundler_DuplicatedGem",
    "title": "Checks for duplicate gem entries in Gemfile.",
    "description": "Checks for duplicate gem entries in Gemfile.",
    "timeToFix": 5
  },
  {
    "patternId": "Bundler_GemComment",
    "title": "Add a comment describing each gem.",
    "description": "Add a comment describing each gem.",
    "timeToFix": 5
  },
  {
    "patternId": "Bundler_InsecureProtocolSource",
    "title": "The source `:gemcutter`, `:rubygems` and `:rubyforge` are deprecated because HTTP requests are insecure. Please change your source to 'https://rubygems.org' if possible, or 'http://rubygems.org' if not.",
    "description": "The source `:gemcutter`, `:rubygems` and `:rubyforge` are deprecated because HTTP requests are insecure. Please change your source to 'https://rubygems.org' if possible, or 'http://rubygems.org' if not.",
    "timeToFix": 5
  },
  {
    "patternId": "Bundler_OrderedGems",
    "title": "Gems within groups in the Gemfile should be alphabetically sorted.",
    "description": "Gems within groups in the Gemfile should be alphabetically sorted.",
    "timeToFix": 5
  },
  {
    "patternId": "Gemspec_DuplicatedAssignment",
    "title": "An attribute assignment method calls should be listed only once in a gemspec.",
    "description": "An attribute assignment method calls should be listed only once in a gemspec.",
    "timeToFix": 5
  },
  {
    "patternId": "Gemspec_OrderedDependencies",
    "title": "Dependencies in the gemspec should be alphabetically sorted.",
    "description": "Dependencies in the gemspec should be alphabetically sorted.",
    "timeToFix": 5
  },
  {
    "patternId": "Gemspec_RequiredRubyVersion",
    "title": "Checks that `required_ruby_version` of gemspec and `TargetRubyVersion` of .rubocop.yml are equal.",
    "description": "Checks that `required_ruby_version` of gemspec and `TargetRubyVersion` of .rubocop.yml are equal.",
    "timeToFix": 5
  },
  {
    "patternId": "Gemspec_RubyVersionGlobalsUsage",
    "title": "Checks usage of RUBY_VERSION in gemspec.",
    "description": "Checks usage of RUBY_VERSION in gemspec.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_AccessModifierIndentation",
    "title": "Check indentation of private/protected visibility modifiers.",
    "description": "Check indentation of private/protected visibility modifiers.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_ArgumentAlignment",
    "title": "Align the arguments of a method call if they span more than one line.",
    "description": "Align the arguments of a method call if they span more than one line.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_ArrayAlignment",
    "title": "Align the elements of an array literal if they span more than one line.",
    "description": "Align the elements of an array literal if they span more than one line.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_AssignmentIndentation",
    "title": "Checks the indentation of the first line of the right-hand-side of a multi-line assignment.",
    "description": "Checks the indentation of the first line of the right-hand-side of a multi-line assignment.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_BlockAlignment",
    "title": "Align block ends correctly.",
    "description": "Align block ends correctly.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_BlockEndNewline",
    "title": "Put end statement of multiline block on its own line.",
    "description": "Put end statement of multiline block on its own line.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_CaseIndentation",
    "title": "Indentation of when in a case/when/[else/]end.",
    "description": "Indentation of when in a case/when/[else/]end.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_ClassStructure",
    "title": "Enforces a configured order of definitions within a class body.",
    "description": "Enforces a configured order of definitions within a class body.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_ClosingHeredocIndentation",
    "title": "Checks the indentation of here document closings.",
    "description": "Checks the indentation of here document closings.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_ClosingParenthesisIndentation",
    "title": "Checks the indentation of hanging closing parentheses.",
    "description": "Checks the indentation of hanging closing parentheses.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_CommentIndentation",
    "title": "Indentation of comments.",
    "description": "Indentation of comments.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_ConditionPosition",
    "title": "Checks for condition placed in a confusing position relative to the keyword.",
    "description": "Checks for condition placed in a confusing position relative to the keyword.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_DefEndAlignment",
    "title": "Align ends corresponding to defs correctly.",
    "description": "Align ends corresponding to defs correctly.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_DotPosition",
    "title": "Checks the position of the dot in multi-line method calls.",
    "description": "Checks the position of the dot in multi-line method calls.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_ElseAlignment",
    "title": "Align elses and elsifs correctly.",
    "description": "Align elses and elsifs correctly.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyComment",
    "title": "Checks empty comment.",
    "description": "Checks empty comment.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLineAfterGuardClause",
    "title": "Add empty line after guard clause.",
    "description": "Add empty line after guard clause.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLineAfterMagicComment",
    "title": "Add an empty line after magic comments to separate them from code.",
    "description": "Add an empty line after magic comments to separate them from code.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLineBetweenDefs",
    "title": "Use empty lines between defs.",
    "description": "Use empty lines between defs.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLinesAroundAccessModifier",
    "title": "Keep blank lines around access modifiers.",
    "description": "Keep blank lines around access modifiers.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLinesAroundArguments",
    "title": "Keeps track of empty lines around method arguments.",
    "description": "Keeps track of empty lines around method arguments.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLinesAroundBeginBody",
    "title": "Keeps track of empty lines around begin-end bodies.",
    "description": "Keeps track of empty lines around begin-end bodies.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLinesAroundBlockBody",
    "title": "Keeps track of empty lines around block bodies.",
    "description": "Keeps track of empty lines around block bodies.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLinesAroundClassBody",
    "title": "Keeps track of empty lines around class bodies.",
    "description": "Keeps track of empty lines around class bodies.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLinesAroundExceptionHandlingKeywords",
    "title": "Keeps track of empty lines around exception handling keywords.",
    "description": "Keeps track of empty lines around exception handling keywords.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLinesAroundMethodBody",
    "title": "Keeps track of empty lines around method bodies.",
    "description": "Keeps track of empty lines around method bodies.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLinesAroundModuleBody",
    "title": "Keeps track of empty lines around module bodies.",
    "description": "Keeps track of empty lines around module bodies.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EmptyLines",
    "title": "Don't use several empty lines in a row.",
    "description": "Don't use several empty lines in a row.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EndAlignment",
    "title": "Align ends correctly.",
    "description": "Align ends correctly.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_EndOfLine",
    "title": "Use Unix-style line endings.",
    "description": "Use Unix-style line endings.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_ExtraSpacing",
    "title": "Do not use unnecessary spacing.",
    "description": "Do not use unnecessary spacing.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_FirstArgumentIndentation",
    "title": "Checks the indentation of the first argument in a method call.",
    "description": "Checks the indentation of the first argument in a method call.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_FirstArrayElementIndentation",
    "title": "Checks the indentation of the first element in an array literal.",
    "description": "Checks the indentation of the first element in an array literal.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_FirstArrayElementLineBreak",
    "title": "Checks for a line break before the first element in a multi-line array.",
    "description": "Checks for a line break before the first element in a multi-line array.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_FirstHashElementIndentation",
    "title": "Checks the indentation of the first key in a hash literal.",
    "description": "Checks the indentation of the first key in a hash literal.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_FirstHashElementLineBreak",
    "title": "Checks for a line break before the first element in a multi-line hash.",
    "description": "Checks for a line break before the first element in a multi-line hash.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_FirstMethodArgumentLineBreak",
    "title": "Checks for a line break before the first argument in a multi-line method call.",
    "description": "Checks for a line break before the first argument in a multi-line method call.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_FirstMethodParameterLineBreak",
    "title": "Checks for a line break before the first parameter in a multi-line method parameter definition.",
    "description": "Checks for a line break before the first parameter in a multi-line method parameter definition.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_FirstParameterIndentation",
    "title": "Checks the indentation of the first parameter in a method definition.",
    "description": "Checks the indentation of the first parameter in a method definition.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_HashAlignment",
    "title": "Align the elements of a hash literal if they span more than one line.",
    "description": "Align the elements of a hash literal if they span more than one line.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_HeredocArgumentClosingParenthesis",
    "title": "Checks for the placement of the closing parenthesis in a method call that passes a HEREDOC string as an argument.",
    "description": "Checks for the placement of the closing parenthesis in a method call that passes a HEREDOC string as an argument.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_HeredocIndentation",
    "title": "This cop checks the indentation of the here document bodies.",
    "description": "This cop checks the indentation of the here document bodies.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_IndentationConsistency",
    "title": "Keep indentation straight.",
    "description": "Keep indentation straight.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_IndentationWidth",
    "title": "Use 2 spaces for indentation.",
    "description": "Use 2 spaces for indentation.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_InitialIndentation",
    "title": "Checks the indentation of the first non-blank non-comment line in a file.",
    "description": "Checks the indentation of the first non-blank non-comment line in a file.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_LeadingCommentSpace",
    "title": "Comments should start with a space.",
    "description": "Comments should start with a space.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_LeadingEmptyLines",
    "title": "Check for unnecessary blank lines at the beginning of a file.",
    "description": "Check for unnecessary blank lines at the beginning of a file.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_LineLength",
    "title": "Limit lines to 80 characters.",
    "description": "Limit lines to 80 characters.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_MultilineArrayBraceLayout",
    "title": "Checks that the closing brace in an array literal is either on the same line as the last array element, or a new line.",
    "description": "Checks that the closing brace in an array literal is either on the same line as the last array element, or a new line.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_MultilineArrayLineBreaks",
    "title": "Checks that each item in a multi-line array literal starts on a separate line.",
    "description": "Checks that each item in a multi-line array literal starts on a separate line.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_MultilineAssignmentLayout",
    "title": "Check for a newline after the assignment operator in multi-line assignments.",
    "description": "Check for a newline after the assignment operator in multi-line assignments.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_MultilineBlockLayout",
    "title": "Ensures newlines after multiline block do statements.",
    "description": "Ensures newlines after multiline block do statements.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_MultilineHashBraceLayout",
    "title": "Checks that the closing brace in a hash literal is either on the same line as the last hash element, or a new line.",
    "description": "Checks that the closing brace in a hash literal is either on the same line as the last hash element, or a new line.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_MultilineHashKeyLineBreaks",
    "title": "Checks that each item in a multi-line hash literal starts on a separate line.",
    "description": "Checks that each item in a multi-line hash literal starts on a separate line.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_MultilineMethodArgumentLineBreaks",
    "title": "Checks that each argument in a multi-line method call starts on a separate line.",
    "description": "Checks that each argument in a multi-line method call starts on a separate line.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_MultilineMethodCallBraceLayout",
    "title": "Checks that the closing brace in a method call is either on the same line as the last method argument, or a new line.",
    "description": "Checks that the closing brace in a method call is either on the same line as the last method argument, or a new line.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_MultilineMethodCallIndentation",
    "title": "Checks indentation of method calls with the dot operator that span more than one line.",
    "description": "Checks indentation of method calls with the dot operator that span more than one line.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_MultilineMethodDefinitionBraceLayout",
    "title": "Checks that the closing brace in a method definition is either on the same line as the last method parameter, or a new line.",
    "description": "Checks that the closing brace in a method definition is either on the same line as the last method parameter, or a new line.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_MultilineOperationIndentation",
    "title": "Checks indentation of binary operations that span more than one line.",
    "description": "Checks indentation of binary operations that span more than one line.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_ParameterAlignment",
    "title": "Align the parameters of a method definition if they span more than one line.",
    "description": "Align the parameters of a method definition if they span more than one line.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_RescueEnsureAlignment",
    "title": "Align rescues and ensures correctly.",
    "description": "Align rescues and ensures correctly.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAfterColon",
    "title": "Use spaces after colons.",
    "description": "Use spaces after colons.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAfterComma",
    "title": "Use spaces after commas.",
    "description": "Use spaces after commas.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAfterMethodName",
    "title": "Do not put a space between a method name and the opening parenthesis in a method definition.",
    "description": "Do not put a space between a method name and the opening parenthesis in a method definition.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAfterNot",
    "title": "Tracks redundant space after the ! operator.",
    "description": "Tracks redundant space after the ! operator.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAfterSemicolon",
    "title": "Use spaces after semicolons.",
    "description": "Use spaces after semicolons.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAroundBlockParameters",
    "title": "Checks the spacing inside and after block parameters pipes.",
    "description": "Checks the spacing inside and after block parameters pipes.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAroundEqualsInParameterDefault",
    "title": "Checks that the equals signs in parameter default assignments have or don't have surrounding space depending on configuration.",
    "description": "Checks that the equals signs in parameter default assignments have or don't have surrounding space depending on configuration.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAroundKeyword",
    "title": "Use a space around keywords if appropriate.",
    "description": "Use a space around keywords if appropriate.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceAroundOperators",
    "title": "Use a single space around operators.",
    "description": "Use a single space around operators.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceBeforeBlockBraces",
    "title": "Checks that the left block brace has or doesn't have space before it.",
    "description": "Checks that the left block brace has or doesn't have space before it.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceBeforeComma",
    "title": "No spaces before commas.",
    "description": "No spaces before commas.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceBeforeComment",
    "title": "Checks for missing space between code and a comment on the same line.",
    "description": "Checks for missing space between code and a comment on the same line.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceBeforeFirstArg",
    "title": "Checks that exactly one space is used between a method name and the first argument for method calls without parentheses.",
    "description": "Checks that exactly one space is used between a method name and the first argument for method calls without parentheses.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceBeforeSemicolon",
    "title": "No spaces before semicolons.",
    "description": "No spaces before semicolons.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceInLambdaLiteral",
    "title": "Checks for spaces in lambda literals.",
    "description": "Checks for spaces in lambda literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceInsideArrayPercentLiteral",
    "title": "No unnecessary additional spaces between elements in %i/%w literals.",
    "description": "No unnecessary additional spaces between elements in %i/%w literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceInsideArrayLiteralBrackets",
    "title": "Checks the spacing inside array literal brackets.",
    "description": "Checks the spacing inside array literal brackets.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceInsideBlockBraces",
    "title": "Checks that block braces have or don't have surrounding space. For blocks taking parameters, checks that the left brace has or doesn't have trailing space.",
    "description": "Checks that block braces have or don't have surrounding space. For blocks taking parameters, checks that the left brace has or doesn't have trailing space.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceInsideHashLiteralBraces",
    "title": "Use spaces inside hash literal braces - or don't.",
    "description": "Use spaces inside hash literal braces - or don't.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceInsideParens",
    "title": "No spaces after ( or before ).",
    "description": "No spaces after ( or before ).",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceInsidePercentLiteralDelimiters",
    "title": "No unnecessary spaces inside delimiters of %i/%w/%x literals.",
    "description": "No unnecessary spaces inside delimiters of %i/%w/%x literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceInsideRangeLiteral",
    "title": "No spaces inside range literals.",
    "description": "No spaces inside range literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceInsideReferenceBrackets",
    "title": "Checks the spacing inside referential brackets.",
    "description": "Checks the spacing inside referential brackets.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_SpaceInsideStringInterpolation",
    "title": "Checks for padding/surrounding spaces inside string interpolation.",
    "description": "Checks for padding/surrounding spaces inside string interpolation.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_Tab",
    "title": "No hard tabs.",
    "description": "No hard tabs.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_TrailingEmptyLines",
    "title": "Checks trailing blank lines and final newline.",
    "description": "Checks trailing blank lines and final newline.",
    "timeToFix": 5
  },
  {
    "patternId": "Layout_TrailingWhitespace",
    "title": "Avoid trailing whitespace.",
    "description": "Avoid trailing whitespace.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_AmbiguousBlockAssociation",
    "title": "Checks for ambiguous block association with method when param passed without parentheses.",
    "description": "Checks for ambiguous block association with method when param passed without parentheses.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_AmbiguousOperator",
    "title": "Checks for ambiguous operators in the first argument of a method invocation without parentheses.",
    "description": "Checks for ambiguous operators in the first argument of a method invocation without parentheses.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_AmbiguousRegexpLiteral",
    "title": "Checks for ambiguous regexp literals in the first argument of a method invocation without parentheses.",
    "description": "Checks for ambiguous regexp literals in the first argument of a method invocation without parentheses.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_AssignmentInCondition",
    "title": "Don't use assignment in conditions.",
    "description": "Don't use assignment in conditions.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_BigDecimalNew",
    "title": "`BigDecimal.new()` is deprecated. Use `BigDecimal()` instead.",
    "description": "`BigDecimal.new()` is deprecated. Use `BigDecimal()` instead.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_BooleanSymbol",
    "title": "Check for `:true` and `:false` symbols.",
    "description": "Check for `:true` and `:false` symbols.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_CircularArgumentReference",
    "title": "Default values in optional keyword arguments and optional ordinal arguments should not refer back to the name of the argument.",
    "description": "Default values in optional keyword arguments and optional ordinal arguments should not refer back to the name of the argument.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_Debugger",
    "title": "Check for debugger calls.",
    "description": "Check for debugger calls.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_DeprecatedClassMethods",
    "title": "Check for deprecated class method calls.",
    "description": "Check for deprecated class method calls.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_DisjunctiveAssignmentInConstructor",
    "title": "In constructor, plain assignment is preferred over disjunctive.",
    "description": "In constructor, plain assignment is preferred over disjunctive.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_DuplicateCaseCondition",
    "title": "Do not repeat values in case conditionals.",
    "description": "Do not repeat values in case conditionals.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_DuplicateHashKey",
    "title": "Check for duplicate keys in hash literals.",
    "description": "Check for duplicate keys in hash literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_DuplicateMethods",
    "title": "Check for duplicate method definitions.",
    "description": "Check for duplicate method definitions.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_EachWithObjectArgument",
    "title": "Check for immutable argument given to each_with_object.",
    "description": "Check for immutable argument given to each_with_object.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ElseLayout",
    "title": "Check for odd code arrangement in an else block.",
    "description": "Check for odd code arrangement in an else block.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_EmptyEnsure",
    "title": "Checks for empty ensure block.",
    "description": "Checks for empty ensure block.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_EmptyExpression",
    "title": "Checks for empty expressions.",
    "description": "Checks for empty expressions.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_EmptyInterpolation",
    "title": "Checks for empty string interpolation.",
    "description": "Checks for empty string interpolation.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_EmptyWhen",
    "title": "Checks for `when` branches with empty bodies.",
    "description": "Checks for `when` branches with empty bodies.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_EndInMethod",
    "title": "END blocks should not be placed inside method definitions.",
    "description": "END blocks should not be placed inside method definitions.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_EnsureReturn",
    "title": "Do not use return in an ensure block.",
    "description": "Do not use return in an ensure block.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ErbNewArguments",
    "title": "Use `:trim_mode` and `:eoutvar` keyword arguments to `ERB.new`.",
    "description": "Use `:trim_mode` and `:eoutvar` keyword arguments to `ERB.new`.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_FlipFlop",
    "title": "Checks for flip-flops.",
    "description": "Checks for flip-flops.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_FloatOutOfRange",
    "title": "Catches floating-point literals too large or small for Ruby to represent.",
    "description": "Catches floating-point literals too large or small for Ruby to represent.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_FormatParameterMismatch",
    "title": "The number of parameters to format/sprint must match the fields.",
    "description": "The number of parameters to format/sprint must match the fields.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_HeredocMethodCallPosition",
    "title": "Checks for the ordering of a method call where the receiver of the call is a HEREDOC.",
    "description": "Checks for the ordering of a method call where the receiver of the call is a HEREDOC.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ImplicitStringConcatenation",
    "title": "Checks for adjacent string literals on the same line, which could better be represented as a single string literal.",
    "description": "Checks for adjacent string literals on the same line, which could better be represented as a single string literal.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_InheritException",
    "title": "Avoid inheriting from the `Exception` class.",
    "description": "Avoid inheriting from the `Exception` class.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_IneffectiveAccessModifier",
    "title": "Checks for attempts to use `private` or `protected` to set the visibility of a class method, which does not work.",
    "description": "Checks for attempts to use `private` or `protected` to set the visibility of a class method, which does not work.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_InterpolationCheck",
    "title": "Raise warning for interpolation in single q strs.",
    "description": "Raise warning for interpolation in single q strs.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_LiteralAsCondition",
    "title": "Checks of literals used in conditions.",
    "description": "Checks of literals used in conditions.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_LiteralInInterpolation",
    "title": "Checks for literals used in interpolation.",
    "description": "Checks for literals used in interpolation.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_Loop",
    "title": "Use Kernel#loop with break rather than begin/end/until or begin/end/while for post-loop tests.",
    "description": "Use Kernel#loop with break rather than begin/end/until or begin/end/while for post-loop tests.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_MissingCopEnableDirective",
    "title": "Checks for a `# rubocop:enable` after `# rubocop:disable`.",
    "description": "Checks for a `# rubocop:enable` after `# rubocop:disable`.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_MultipleComparison",
    "title": "Use `&&` operator to compare multiple values.",
    "description": "Use `&&` operator to compare multiple values.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_NestedMethodDefinition",
    "title": "Do not use nested method definitions.",
    "description": "Do not use nested method definitions.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_NestedPercentLiteral",
    "title": "Checks for nested percent literals.",
    "description": "Checks for nested percent literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_NextWithoutAccumulator",
    "title": "Do not omit the accumulator when calling `next` in a `reduce`/`inject` block.",
    "description": "Do not omit the accumulator when calling `next` in a `reduce`/`inject` block.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_NonDeterministicRequireOrder",
    "title": "Always sort arrays returned by Dir.glob when requiring files.",
    "description": "Always sort arrays returned by Dir.glob when requiring files.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_NonLocalExitFromIterator",
    "title": "Do not use return in iterator to cause non-local exit.",
    "description": "Do not use return in iterator to cause non-local exit.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_NumberConversion",
    "title": "Checks unsafe usage of number conversion methods.",
    "description": "Checks unsafe usage of number conversion methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_OrderedMagicComments",
    "title": "Checks the proper ordering of magic comments and whether a magic comment is not placed before a shebang.",
    "description": "Checks the proper ordering of magic comments and whether a magic comment is not placed before a shebang.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ParenthesesAsGroupedExpression",
    "title": "Checks for method calls with a space before the opening parenthesis.",
    "description": "Checks for method calls with a space before the opening parenthesis.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_PercentStringArray",
    "title": "Checks for unwanted commas and quotes in %w/%W literals.",
    "description": "Checks for unwanted commas and quotes in %w/%W literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_PercentSymbolArray",
    "title": "Checks for unwanted commas and colons in %i/%I literals.",
    "description": "Checks for unwanted commas and colons in %i/%I literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RandOne",
    "title": "Checks for `rand(1)` calls. Such calls always return `0` and most likely a mistake.",
    "description": "Checks for `rand(1)` calls. Such calls always return `0` and most likely a mistake.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RedundantCopDisableDirective",
    "title": "Checks for rubocop:disable comments that can be removed. Note: this cop is not disabled when disabling all cops. It must be explicitly disabled.",
    "description": "Checks for rubocop:disable comments that can be removed. Note: this cop is not disabled when disabling all cops. It must be explicitly disabled.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RedundantCopEnableDirective",
    "title": "Checks for rubocop:enable comments that can be removed.",
    "description": "Checks for rubocop:enable comments that can be removed.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RedundantRequireStatement",
    "title": "Checks for unnecessary `require` statement.",
    "description": "Checks for unnecessary `require` statement.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RedundantSplatExpansion",
    "title": "Checks for splat unnecessarily being called on literals.",
    "description": "Checks for splat unnecessarily being called on literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RedundantStringCoercion",
    "title": "Checks for Object#to_s usage in string interpolation.",
    "description": "Checks for Object#to_s usage in string interpolation.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RedundantWithIndex",
    "title": "Checks for redundant `with_index`.",
    "description": "Checks for redundant `with_index`.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RedundantWithObject",
    "title": "Checks for redundant `with_object`.",
    "description": "Checks for redundant `with_object`.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RegexpAsCondition",
    "title": "Do not use regexp literal as a condition. The regexp literal matches `$_` implicitly.",
    "description": "Do not use regexp literal as a condition. The regexp literal matches `$_` implicitly.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RequireParentheses",
    "title": "Use parentheses in the method call to avoid confusion about precedence.",
    "description": "Use parentheses in the method call to avoid confusion about precedence.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RescueException",
    "title": "Avoid rescuing the Exception class.",
    "description": "Avoid rescuing the Exception class.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_RescueType",
    "title": "Avoid rescuing from non constants that could result in a `TypeError`.",
    "description": "Avoid rescuing from non constants that could result in a `TypeError`.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ReturnInVoidContext",
    "title": "Checks for return in void context.",
    "description": "Checks for return in void context.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_SafeNavigationConsistency",
    "title": "Check to make sure that if safe navigation is used for a method call in an `&&` or `||` condition that safe navigation is used for all method calls on that same object.",
    "description": "Check to make sure that if safe navigation is used for a method call in an `&&` or `||` condition that safe navigation is used for all method calls on that same object.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_SafeNavigationChain",
    "title": "Do not chain ordinary method call after safe navigation operator.",
    "description": "Do not chain ordinary method call after safe navigation operator.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_SafeNavigationWithEmpty",
    "title": "Avoid `foo&.empty?` in conditionals.",
    "description": "Avoid `foo&.empty?` in conditionals.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ScriptPermission",
    "title": "Grant script file execute permission.",
    "description": "Grant script file execute permission.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_SendWithMixinArgument",
    "title": "Checks for `send` method when using mixin.",
    "description": "Checks for `send` method when using mixin.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ShadowedArgument",
    "title": "Avoid reassigning arguments before they were used.",
    "description": "Avoid reassigning arguments before they were used.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ShadowedException",
    "title": "Avoid rescuing a higher level exception before a lower level exception.",
    "description": "Avoid rescuing a higher level exception before a lower level exception.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ShadowingOuterLocalVariable",
    "title": "Do not use the same name as outer local variable for block arguments or block local variables.",
    "description": "Do not use the same name as outer local variable for block arguments or block local variables.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_SuppressedException",
    "title": "Don't suppress exceptions.",
    "description": "Don't suppress exceptions.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_Syntax",
    "title": "Checks syntax error.",
    "description": "Checks syntax error.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_ToJSON",
    "title": "Ensure #to_json includes an optional argument.",
    "description": "Ensure #to_json includes an optional argument.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UnderscorePrefixedVariableName",
    "title": "Do not use prefix `_` for a variable that is used.",
    "description": "Do not use prefix `_` for a variable that is used.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UnifiedInteger",
    "title": "Use Integer instead of Fixnum or Bignum.",
    "description": "Use Integer instead of Fixnum or Bignum.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UnreachableCode",
    "title": "Unreachable code.",
    "description": "Unreachable code.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UnusedBlockArgument",
    "title": "Checks for unused block arguments.",
    "description": "Checks for unused block arguments.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UnusedMethodArgument",
    "title": "Checks for unused method arguments.",
    "description": "Checks for unused method arguments.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UriEscapeUnescape",
    "title": "`URI.escape` method is obsolete and should not be used. Instead, use `CGI.escape`, `URI.encode_www_form` or `URI.encode_www_form_component` depending on your specific use case. Also `URI.unescape` method is obsolete and should not be used.",
    "description": "`URI.escape` method is obsolete and should not be used. Instead, use `CGI.escape`, `URI.encode_www_form` or `URI.encode_www_form_component` depending on your specific use case. Also `URI.unescape` method is obsolete and should not be used. Instead, use `CGI.unescape`, `URI.decode_www_form` or `URI.decode_www_form_component` depending on your specific use case.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UriRegexp",
    "title": "Use `URI::DEFAULT_PARSER.make_regexp` instead of `URI.regexp`.",
    "description": "Use `URI::DEFAULT_PARSER.make_regexp` instead of `URI.regexp`.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UselessAccessModifier",
    "title": "Checks for useless access modifiers.",
    "description": "Checks for useless access modifiers.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UselessAssignment",
    "title": "Checks for useless assignment to a local variable.",
    "description": "Checks for useless assignment to a local variable.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UselessComparison",
    "title": "Checks for comparison of something with itself.",
    "description": "Checks for comparison of something with itself.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UselessElseWithoutRescue",
    "title": "Checks for useless `else` in `begin..end` without `rescue`.",
    "description": "Checks for useless `else` in `begin..end` without `rescue`.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_UselessSetterCall",
    "title": "Checks for useless setter call to a local variable.",
    "description": "Checks for useless setter call to a local variable.",
    "timeToFix": 5
  },
  {
    "patternId": "Lint_Void",
    "title": "Possible use of operator/literal/variable in void context.",
    "description": "Possible use of operator/literal/variable in void context.",
    "timeToFix": 5
  },
  {
    "patternId": "Metrics_CyclomaticComplexity",
    "title": "A complexity metric that is strongly correlated to the number of test cases needed to validate a method.",
    "description": "A complexity metric that is strongly correlated to the number of test cases needed to validate a method.",
    "timeToFix": 5
  },
  {
    "patternId": "Metrics_AbcSize",
    "title": "A calculated magnitude based on number of assignments, branches, and conditions.",
    "description": "A calculated magnitude based on number of assignments, branches, and conditions.",
    "timeToFix": 5
  },
  {
    "patternId": "Metrics_BlockLength",
    "title": "Avoid long blocks with many lines.",
    "description": "Avoid long blocks with many lines.",
    "timeToFix": 5
  },
  {
    "patternId": "Metrics_BlockNesting",
    "title": "Avoid excessive block nesting.",
    "description": "Avoid excessive block nesting.",
    "timeToFix": 5
  },
  {
    "patternId": "Metrics_ClassLength",
    "title": "Avoid classes longer than 100 lines of code.",
    "description": "Avoid classes longer than 100 lines of code.",
    "timeToFix": 5
  },
  {
    "patternId": "Metrics_MethodLength",
    "title": "Avoid methods longer than 10 lines of code.",
    "description": "Avoid methods longer than 10 lines of code.",
    "timeToFix": 5
  },
  {
    "patternId": "Metrics_ModuleLength",
    "title": "Avoid modules longer than 100 lines of code.",
    "description": "Avoid modules longer than 100 lines of code.",
    "timeToFix": 5
  },
  {
    "patternId": "Metrics_ParameterLists",
    "title": "Avoid parameter lists longer than three or four parameters.",
    "description": "Avoid parameter lists longer than three or four parameters.",
    "timeToFix": 5
  },
  {
    "patternId": "Metrics_PerceivedComplexity",
    "title": "A complexity metric geared towards measuring complexity for a human reader.",
    "description": "A complexity metric geared towards measuring complexity for a human reader.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_AccessorMethodName",
    "title": "Check the naming of accessor methods for get_/set_.",
    "description": "Check the naming of accessor methods for get_/set_.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_AsciiIdentifiers",
    "title": "Use only ascii symbols in identifiers.",
    "description": "Use only ascii symbols in identifiers.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_BlockParameterName",
    "title": "Checks for block parameter names that contain capital letters, end in numbers, or do not meet a minimal length.",
    "description": "Checks for block parameter names that contain capital letters, end in numbers, or do not meet a minimal length.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_ClassAndModuleCamelCase",
    "title": "Use CamelCase for classes and modules.",
    "description": "Use CamelCase for classes and modules.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_ConstantName",
    "title": "Constants should use SCREAMING_SNAKE_CASE.",
    "description": "Constants should use SCREAMING_SNAKE_CASE.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_FileName",
    "title": "Use snake_case for source file names.",
    "description": "Use snake_case for source file names.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_HeredocDelimiterCase",
    "title": "Use configured case for heredoc delimiters.",
    "description": "Use configured case for heredoc delimiters.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_HeredocDelimiterNaming",
    "title": "Use descriptive heredoc delimiters.",
    "description": "Use descriptive heredoc delimiters.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_MemoizedInstanceVariableName",
    "title": "Memoized method name should match memo instance variable name.",
    "description": "Memoized method name should match memo instance variable name.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_MethodName",
    "title": "Use the configured style when naming methods.",
    "description": "Use the configured style when naming methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_MethodParameterName",
    "title": "Checks for method parameter names that contain capital letters, end in numbers, or do not meet a minimal length.",
    "description": "Checks for method parameter names that contain capital letters, end in numbers, or do not meet a minimal length.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_BinaryOperatorParameterName",
    "title": "When defining binary operators, name the argument other.",
    "description": "When defining binary operators, name the argument other.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_PredicateName",
    "title": "Check the names of predicate methods.",
    "description": "Check the names of predicate methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_RescuedExceptionsVariableName",
    "title": "Use consistent rescued exceptions variables naming.",
    "description": "Use consistent rescued exceptions variables naming.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_VariableName",
    "title": "Use the configured style when naming variables.",
    "description": "Use the configured style when naming variables.",
    "timeToFix": 5
  },
  {
    "patternId": "Naming_VariableNumber",
    "title": "Use the configured style when numbering variables.",
    "description": "Use the configured style when numbering variables.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_AccessModifierDeclarations",
    "title": "Checks style of how access modifiers are used.",
    "description": "Checks style of how access modifiers are used.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Alias",
    "title": "Use alias instead of alias_method.",
    "description": "Use alias instead of alias_method.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_AndOr",
    "title": "Use &&/|| instead of and/or.",
    "description": "Use &&/|| instead of and/or.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ArrayJoin",
    "title": "Use Array#join instead of Array#*.",
    "description": "Use Array#join instead of Array#*.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_AsciiComments",
    "title": "Use only ascii symbols in comments.",
    "description": "Use only ascii symbols in comments.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Attr",
    "title": "Checks for uses of Module#attr.",
    "description": "Checks for uses of Module#attr.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_AutoResourceCleanup",
    "title": "Suggests the usage of an auto resource cleanup version of a method (if available).",
    "description": "Suggests the usage of an auto resource cleanup version of a method (if available).",
    "timeToFix": 5
  },
  {
    "patternId": "Style_BarePercentLiterals",
    "title": "Checks if usage of %() or %Q() matches configuration.",
    "description": "Checks if usage of %() or %Q() matches configuration.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_BeginBlock",
    "title": "Avoid the use of BEGIN blocks.",
    "description": "Avoid the use of BEGIN blocks.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_BlockComments",
    "title": "Do not use block comments.",
    "description": "Do not use block comments.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_BlockDelimiters",
    "title": "Avoid using {...} for multi-line blocks (multiline chaining is always ugly). Prefer {...} over do...end for single-line blocks.",
    "description": "Avoid using {...} for multi-line blocks (multiline chaining is always ugly). Prefer {...} over do...end for single-line blocks.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_CaseEquality",
    "title": "Avoid explicit use of the case equality operator(===).",
    "description": "Avoid explicit use of the case equality operator(===).",
    "timeToFix": 5
  },
  {
    "patternId": "Style_CharacterLiteral",
    "title": "Checks for uses of character literals.",
    "description": "Checks for uses of character literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ClassAndModuleChildren",
    "title": "Checks style of children classes and modules.",
    "description": "Checks style of children classes and modules.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ClassCheck",
    "title": "Enforces consistent use of `Object#is_a?` or `Object#kind_of?`.",
    "description": "Enforces consistent use of `Object#is_a?` or `Object#kind_of?`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ClassMethods",
    "title": "Use self when defining module/class methods.",
    "description": "Use self when defining module/class methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ClassVars",
    "title": "Avoid the use of class variables.",
    "description": "Avoid the use of class variables.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_CollectionMethods",
    "title": "Preferred collection methods.",
    "description": "Preferred collection methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ColonMethodCall",
    "title": "Do not use :: for method call.",
    "description": "Do not use :: for method call.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ColonMethodDefinition",
    "title": "Do not use :: for defining class methods.",
    "description": "Do not use :: for defining class methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_CommandLiteral",
    "title": "Use `` or %x around command literals.",
    "description": "Use `` or %x around command literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_CommentAnnotation",
    "title": "Checks formatting of special comments (TODO, FIXME, OPTIMIZE, HACK, REVIEW).",
    "description": "Checks formatting of special comments (TODO, FIXME, OPTIMIZE, HACK, REVIEW).",
    "timeToFix": 5
  },
  {
    "patternId": "Style_CommentedKeyword",
    "title": "Do not place comments on the same line as certain keywords.",
    "description": "Do not place comments on the same line as certain keywords.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ConditionalAssignment",
    "title": "Use the return value of `if` and `case` statements for assignment to a variable and variable comparison instead of assigning that variable inside of each branch.",
    "description": "Use the return value of `if` and `case` statements for assignment to a variable and variable comparison instead of assigning that variable inside of each branch.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ConstantVisibility",
    "title": "Check that class- and module constants have visibility declarations.",
    "description": "Check that class- and module constants have visibility declarations.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Copyright",
    "title": "Include a copyright notice in each file before any code.",
    "description": "Include a copyright notice in each file before any code.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_DateTime",
    "title": "Use Time over DateTime.",
    "description": "Use Time over DateTime.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_DefWithParentheses",
    "title": "Use def with parentheses when there are arguments.",
    "description": "Use def with parentheses when there are arguments.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Dir",
    "title": "Use the `__dir__` method to retrieve the canonicalized absolute path to the current file.",
    "description": "Use the `__dir__` method to retrieve the canonicalized absolute path to the current file.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_DocumentationMethod",
    "title": "Checks for missing documentation comment for public methods.",
    "description": "Checks for missing documentation comment for public methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Documentation",
    "title": "Document classes and non-namespace modules.",
    "description": "Document classes and non-namespace modules.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_DoubleCopDisableDirective",
    "title": "Checks for double rubocop:disable comments on a single line.",
    "description": "Checks for double rubocop:disable comments on a single line.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_DoubleNegation",
    "title": "Checks for uses of double negation (!!).",
    "description": "Checks for uses of double negation (!!).",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EachForSimpleLoop",
    "title": "Use `Integer#times` for a simple loop which iterates a fixed number of times.",
    "description": "Use `Integer#times` for a simple loop which iterates a fixed number of times.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EachWithObject",
    "title": "Prefer `each_with_object` over `inject` or `reduce`.",
    "description": "Prefer `each_with_object` over `inject` or `reduce`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EmptyBlockParameter",
    "title": "Omit pipes for empty block parameters.",
    "description": "Omit pipes for empty block parameters.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EmptyCaseCondition",
    "title": "Avoid empty condition in case statements.",
    "description": "Avoid empty condition in case statements.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EmptyElse",
    "title": "Avoid empty else-clauses.",
    "description": "Avoid empty else-clauses.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EmptyLambdaParameter",
    "title": "Omit parens for empty lambda parameters.",
    "description": "Omit parens for empty lambda parameters.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EmptyLiteral",
    "title": "Prefer literals to Array.new/Hash.new/String.new.",
    "description": "Prefer literals to Array.new/Hash.new/String.new.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EmptyMethod",
    "title": "Checks the formatting of empty method definitions.",
    "description": "Checks the formatting of empty method definitions.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Encoding",
    "title": "Use UTF-8 as the source file encoding.",
    "description": "Use UTF-8 as the source file encoding.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EndBlock",
    "title": "Avoid the use of END blocks.",
    "description": "Avoid the use of END blocks.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EvalWithLocation",
    "title": "Pass `__FILE__` and `__LINE__` to `eval` method, as they are used by backtraces.",
    "description": "Pass `__FILE__` and `__LINE__` to `eval` method, as they are used by backtraces.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_EvenOdd",
    "title": "Favor the use of `Integer#even?` && `Integer#odd?`.",
    "description": "Favor the use of `Integer#even?` && `Integer#odd?`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ExpandPathArguments",
    "title": "Use `expand_path(__dir__)` instead of `expand_path('..', __FILE__)`.",
    "description": "Use `expand_path(__dir__)` instead of `expand_path('..', __FILE__)`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_FloatDivision",
    "title": "For performing float division, coerce one side only.",
    "description": "For performing float division, coerce one side only.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_For",
    "title": "Checks use of for or each in multiline loops.",
    "description": "Checks use of for or each in multiline loops.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_FormatString",
    "title": "Enforce the use of Kernel#sprintf, Kernel#format or String#%.",
    "description": "Enforce the use of Kernel#sprintf, Kernel#format or String#%.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_FormatStringToken",
    "title": "Use a consistent style for format string tokens.",
    "description": "Use a consistent style for format string tokens.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_FrozenStringLiteralComment",
    "title": "Add the frozen_string_literal comment to the top of files to help transition to frozen string literals by default.",
    "description": "Add the frozen_string_literal comment to the top of files to help transition to frozen string literals by default.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_GlobalVars",
    "title": "Do not introduce global variables.",
    "description": "Do not introduce global variables.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_GuardClause",
    "title": "Check for conditionals that can be replaced with guard clauses.",
    "description": "Check for conditionals that can be replaced with guard clauses.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_HashEachMethods",
    "title": "Use Hash#each_key and Hash#each_value.",
    "description": "Use Hash#each_key and Hash#each_value.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_HashSyntax",
    "title": "Prefer Ruby 1.9 hash syntax { a: 1, b: 2 } over 1.8 syntax { :a => 1, :b => 2 }.",
    "description": "Prefer Ruby 1.9 hash syntax { a: 1, b: 2 } over 1.8 syntax { :a => 1, :b => 2 }.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_HashTransformKeys",
    "title": "Prefer `transform_keys` over `each_with_object` and `map`.",
    "description": "Prefer `transform_keys` over `each_with_object` and `map`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_HashTransformValues",
    "title": "Prefer `transform_values` over `each_with_object` and `map`.",
    "description": "Prefer `transform_values` over `each_with_object` and `map`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_IdenticalConditionalBranches",
    "title": "Checks that conditional statements do not have an identical line at the end of each branch, which can validly be moved out of the conditional.",
    "description": "Checks that conditional statements do not have an identical line at the end of each branch, which can validly be moved out of the conditional.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_IfInsideElse",
    "title": "Finds if nodes inside else, which can be converted to elsif.",
    "description": "Finds if nodes inside else, which can be converted to elsif.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_IfUnlessModifier",
    "title": "Favor modifier if/unless usage when you have a single-line body.",
    "description": "Favor modifier if/unless usage when you have a single-line body.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_IfUnlessModifierOfIfUnless",
    "title": "Avoid modifier if/unless usage on conditionals.",
    "description": "Avoid modifier if/unless usage on conditionals.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_IfWithSemicolon",
    "title": "Do not use if x; .... Use the ternary operator instead.",
    "description": "Do not use if x; .... Use the ternary operator instead.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ImplicitRuntimeError",
    "title": "Use `raise` or `fail` with an explicit exception class and message, rather than just a message.",
    "description": "Use `raise` or `fail` with an explicit exception class and message, rather than just a message.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_InfiniteLoop",
    "title": "Use Kernel#loop for infinite loops.",
    "description": "Use Kernel#loop for infinite loops.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_InverseMethods",
    "title": "Use the inverse method instead of `!.method` if an inverse method is defined.",
    "description": "Use the inverse method instead of `!.method` if an inverse method is defined.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_InlineComment",
    "title": "Avoid trailing inline comments.",
    "description": "Avoid trailing inline comments.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_IpAddresses",
    "title": "Don't include literal IP addresses in code.",
    "description": "Don't include literal IP addresses in code.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Lambda",
    "title": "Use the new lambda literal syntax for single-line blocks.",
    "description": "Use the new lambda literal syntax for single-line blocks.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_LambdaCall",
    "title": "Use lambda.call(...) instead of lambda.(...).",
    "description": "Use lambda.call(...) instead of lambda.(...).",
    "timeToFix": 5
  },
  {
    "patternId": "Style_LineEndConcatenation",
    "title": "Use \\ instead of + or << to concatenate two string literals at line end.",
    "description": "Use \\ instead of + or << to concatenate two string literals at line end.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MethodCallWithoutArgsParentheses",
    "title": "Do not use parentheses for method calls with no arguments.",
    "description": "Do not use parentheses for method calls with no arguments.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MethodCallWithArgsParentheses",
    "title": "Use parentheses for method calls with arguments.",
    "description": "Use parentheses for method calls with arguments.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MethodCalledOnDoEndBlock",
    "title": "Avoid chaining a method call on a do...end block.",
    "description": "Avoid chaining a method call on a do...end block.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MethodDefParentheses",
    "title": "Checks if the method definitions have or don't have parentheses.",
    "description": "Checks if the method definitions have or don't have parentheses.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MethodMissingSuper",
    "title": "Checks for `method_missing` to call `super`.",
    "description": "Checks for `method_missing` to call `super`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MinMax",
    "title": "Use `Enumerable#minmax` instead of `Enumerable#min` and `Enumerable#max` in conjunction.",
    "description": "Use `Enumerable#minmax` instead of `Enumerable#min` and `Enumerable#max` in conjunction.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MissingElse",
    "title": "Require if/case expressions to have an else branches. If enabled, it is recommended that Style/UnlessElse and Style/EmptyElse be enabled. This will conflict with Style/EmptyElse if Style/EmptyElse is configured to style \"both\".",
    "description": "Require if/case expressions to have an else branches. If enabled, it is recommended that Style/UnlessElse and Style/EmptyElse be enabled. This will conflict with Style/EmptyElse if Style/EmptyElse is configured to style \"both\".",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MissingRespondToMissing",
    "title": "Checks if `method_missing` is implemented without implementing `respond_to_missing`.",
    "description": "Checks if `method_missing` is implemented without implementing `respond_to_missing`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MixinGrouping",
    "title": "Checks for grouping of mixins in `class` and `module` bodies.",
    "description": "Checks for grouping of mixins in `class` and `module` bodies.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MixinUsage",
    "title": "Checks that `include`, `extend` and `prepend` exists at the top level.",
    "description": "Checks that `include`, `extend` and `prepend` exists at the top level.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ModuleFunction",
    "title": "Checks for usage of `extend self` in modules.",
    "description": "Checks for usage of `extend self` in modules.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MultilineBlockChain",
    "title": "Avoid multi-line chains of blocks.",
    "description": "Avoid multi-line chains of blocks.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MultilineIfThen",
    "title": "Do not use then for multi-line if/unless.",
    "description": "Do not use then for multi-line if/unless.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MultilineIfModifier",
    "title": "Only use if/unless modifiers on single line statements.",
    "description": "Only use if/unless modifiers on single line statements.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MultilineMethodSignature",
    "title": "Avoid multi-line method signatures.",
    "description": "Avoid multi-line method signatures.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MultilineMemoization",
    "title": "Wrap multiline memoizations in a `begin` and `end` block.",
    "description": "Wrap multiline memoizations in a `begin` and `end` block.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MultilineTernaryOperator",
    "title": "Avoid multi-line ?: (the ternary operator); use if/unless instead.",
    "description": "Avoid multi-line ?: (the ternary operator); use if/unless instead.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MultilineWhenThen",
    "title": "Do not use then for multi-line when statement.",
    "description": "Do not use then for multi-line when statement.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MultipleComparison",
    "title": "Avoid comparing a variable with multiple items in a conditional, use Array#include? instead.",
    "description": "Avoid comparing a variable with multiple items in a conditional, use Array#include? instead.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_MutableConstant",
    "title": "Do not assign mutable objects to constants.",
    "description": "Do not assign mutable objects to constants.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NegatedIf",
    "title": "Favor unless over if for negative conditions (or control flow or).",
    "description": "Favor unless over if for negative conditions (or control flow or).",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NegatedUnless",
    "title": "Favor if over unless for negative conditions.",
    "description": "Favor if over unless for negative conditions.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NegatedWhile",
    "title": "Favor until over while for negative conditions.",
    "description": "Favor until over while for negative conditions.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NestedModifier",
    "title": "Avoid using nested modifiers.",
    "description": "Avoid using nested modifiers.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NestedParenthesizedCalls",
    "title": "Parenthesize method calls which are nested inside the argument list of another parenthesized method call.",
    "description": "Parenthesize method calls which are nested inside the argument list of another parenthesized method call.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NestedTernaryOperator",
    "title": "Use one expression per branch in a ternary operator.",
    "description": "Use one expression per branch in a ternary operator.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Next",
    "title": "Use `next` to skip iteration instead of a condition at the end.",
    "description": "Use `next` to skip iteration instead of a condition at the end.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NilComparison",
    "title": "Prefer x.nil? to x == nil.",
    "description": "Prefer x.nil? to x == nil.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NonNilCheck",
    "title": "Checks for redundant nil checks.",
    "description": "Checks for redundant nil checks.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Not",
    "title": "Use ! instead of not.",
    "description": "Use ! instead of not.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NumericLiterals",
    "title": "Add underscores to large numeric literals to improve their readability.",
    "description": "Add underscores to large numeric literals to improve their readability.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NumericLiteralPrefix",
    "title": "Use smallcase prefixes for numeric literals.",
    "description": "Use smallcase prefixes for numeric literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_NumericPredicate",
    "title": "Checks for the use of predicate- or comparison methods for numeric comparisons.",
    "description": "Checks for the use of predicate- or comparison methods for numeric comparisons.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_OneLineConditional",
    "title": "Favor the ternary operator(?:) over if/then/else/end constructs.",
    "description": "Favor the ternary operator(?:) over if/then/else/end constructs.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_OrAssignment",
    "title": "Recommend usage of double pipe equals (||=) where applicable.",
    "description": "Recommend usage of double pipe equals (||=) where applicable.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_OptionHash",
    "title": "Don't use option hashes when you can use keyword arguments.",
    "description": "Don't use option hashes when you can use keyword arguments.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_OptionalArguments",
    "title": "Checks for optional arguments that do not appear at the end of the argument list.",
    "description": "Checks for optional arguments that do not appear at the end of the argument list.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ParallelAssignment",
    "title": "Check for simple usages of parallel assignment. It will only warn when the number of variables matches on both sides of the assignment.",
    "description": "Check for simple usages of parallel assignment. It will only warn when the number of variables matches on both sides of the assignment.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ParenthesesAroundCondition",
    "title": "Don't use parentheses around the condition of an if/unless/while.",
    "description": "Don't use parentheses around the condition of an if/unless/while.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_PercentLiteralDelimiters",
    "title": "Use `%`-literal delimiters consistently.",
    "description": "Use `%`-literal delimiters consistently.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_PercentQLiterals",
    "title": "Checks if uses of %Q/%q match the configured preference.",
    "description": "Checks if uses of %Q/%q match the configured preference.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_PerlBackrefs",
    "title": "Avoid Perl-style regex back references.",
    "description": "Avoid Perl-style regex back references.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_PreferredHashMethods",
    "title": "Checks use of `has_key?` and `has_value?` Hash methods.",
    "description": "Checks use of `has_key?` and `has_value?` Hash methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Proc",
    "title": "Use proc instead of Proc.new.",
    "description": "Use proc instead of Proc.new.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RaiseArgs",
    "title": "Checks the arguments passed to raise/fail.",
    "description": "Checks the arguments passed to raise/fail.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RandomWithOffset",
    "title": "Prefer to use ranges when generating random numbers instead of integers with offsets.",
    "description": "Prefer to use ranges when generating random numbers instead of integers with offsets.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantBegin",
    "title": "Don't use begin blocks when they are not needed.",
    "description": "Don't use begin blocks when they are not needed.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantCapitalW",
    "title": "Checks for %W when interpolation is not needed.",
    "description": "Checks for %W when interpolation is not needed.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantCondition",
    "title": "Checks for unnecessary conditional expressions.",
    "description": "Checks for unnecessary conditional expressions.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantConditional",
    "title": "Don't return true/false from a conditional.",
    "description": "Don't return true/false from a conditional.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantException",
    "title": "Checks for an obsolete RuntimeException argument in raise/fail.",
    "description": "Checks for an obsolete RuntimeException argument in raise/fail.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantFreeze",
    "title": "Checks usages of Object#freeze on immutable objects.",
    "description": "Checks usages of Object#freeze on immutable objects.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantInterpolation",
    "title": "Checks for strings that are just an interpolated expression.",
    "description": "Checks for strings that are just an interpolated expression.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantParentheses",
    "title": "Checks for parentheses that seem not to serve any purpose.",
    "description": "Checks for parentheses that seem not to serve any purpose.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantPercentQ",
    "title": "Checks for %q/%Q when single quotes or double quotes would do.",
    "description": "Checks for %q/%Q when single quotes or double quotes would do.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantReturn",
    "title": "Don't use return where it's not required.",
    "description": "Don't use return where it's not required.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantSelf",
    "title": "Don't use self where it's not needed.",
    "description": "Don't use self where it's not needed.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantSort",
    "title": "Use `min` instead of `sort.first`, `max_by` instead of `sort_by...last`, etc.",
    "description": "Use `min` instead of `sort.first`, `max_by` instead of `sort_by...last`, etc.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RedundantSortBy",
    "title": "Use `sort` instead of `sort_by { |x| x }`.",
    "description": "Use `sort` instead of `sort_by { |x| x }`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RegexpLiteral",
    "title": "Use / or %r around regular expressions.",
    "description": "Use / or %r around regular expressions.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RescueModifier",
    "title": "Avoid using rescue in its modifier form.",
    "description": "Avoid using rescue in its modifier form.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_RescueStandardError",
    "title": "Avoid rescuing without specifying an error class.",
    "description": "Avoid rescuing without specifying an error class.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ReturnNil",
    "title": "Use return instead of return nil.",
    "description": "Use return instead of return nil.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_SafeNavigation",
    "title": "This cop transforms usages of a method call safeguarded by a check for the existence of the object to safe navigation (`&.`).",
    "description": "This cop transforms usages of a method call safeguarded by a check for the existence of the object to safe navigation (`&.`).",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Sample",
    "title": "Use `sample` instead of `shuffle.first`, `shuffle.last`, and `shuffle[Integer]`.",
    "description": "Use `sample` instead of `shuffle.first`, `shuffle.last`, and `shuffle[Integer]`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_SelfAssignment",
    "title": "Checks for places where self-assignment shorthand should have been used.",
    "description": "Checks for places where self-assignment shorthand should have been used.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Semicolon",
    "title": "Don't use semicolons to terminate expressions.",
    "description": "Don't use semicolons to terminate expressions.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Send",
    "title": "Prefer `Object#__send__` or `Object#public_send` to `send`, as `send` may overlap with existing methods.",
    "description": "Prefer `Object#__send__` or `Object#public_send` to `send`, as `send` may overlap with existing methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_SignalException",
    "title": "Checks for proper usage of fail and raise.",
    "description": "Checks for proper usage of fail and raise.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_SingleLineBlockParams",
    "title": "Enforces the names of some block params.",
    "description": "Enforces the names of some block params.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_SingleLineMethods",
    "title": "Avoid single-line methods.",
    "description": "Avoid single-line methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_SpecialGlobalVars",
    "title": "Avoid Perl-style global variables.",
    "description": "Avoid Perl-style global variables.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_StabbyLambdaParentheses",
    "title": "Check for the usage of parentheses around stabby lambda arguments.",
    "description": "Check for the usage of parentheses around stabby lambda arguments.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_StderrPuts",
    "title": "Use `warn` instead of `$stderr.puts`.",
    "description": "Use `warn` instead of `$stderr.puts`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_StringHashKeys",
    "title": "Prefer symbols instead of strings as hash keys.",
    "description": "Prefer symbols instead of strings as hash keys.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_StringLiterals",
    "title": "Checks if uses of quotes match the configured preference.",
    "description": "Checks if uses of quotes match the configured preference.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_StringLiteralsInInterpolation",
    "title": "Checks if uses of quotes inside expressions in interpolated strings match the configured preference.",
    "description": "Checks if uses of quotes inside expressions in interpolated strings match the configured preference.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_StringMethods",
    "title": "Checks if configured preferred methods are used over non-preferred.",
    "description": "Checks if configured preferred methods are used over non-preferred.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_Strip",
    "title": "Use `strip` instead of `lstrip.rstrip`.",
    "description": "Use `strip` instead of `lstrip.rstrip`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_StructInheritance",
    "title": "Checks for inheritance from Struct.new.",
    "description": "Checks for inheritance from Struct.new.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_SymbolArray",
    "title": "Use %i or %I for arrays of symbols.",
    "description": "Use %i or %I for arrays of symbols.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_SymbolLiteral",
    "title": "Use plain symbols instead of string symbols when possible.",
    "description": "Use plain symbols instead of string symbols when possible.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_SymbolProc",
    "title": "Use symbols as procs instead of blocks when possible.",
    "description": "Use symbols as procs instead of blocks when possible.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_TernaryParentheses",
    "title": "Checks for use of parentheses around ternary conditions.",
    "description": "Checks for use of parentheses around ternary conditions.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_TrailingBodyOnClass",
    "title": "Class body goes below class statement.",
    "description": "Class body goes below class statement.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_TrailingBodyOnMethodDefinition",
    "title": "Method body goes below definition.",
    "description": "Method body goes below definition.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_TrailingBodyOnModule",
    "title": "Module body goes below module statement.",
    "description": "Module body goes below module statement.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_TrailingCommaInArguments",
    "title": "Checks for trailing comma in argument lists.",
    "description": "Checks for trailing comma in argument lists.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_TrailingCommaInArrayLiteral",
    "title": "Checks for trailing comma in array literals.",
    "description": "Checks for trailing comma in array literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_TrailingCommaInHashLiteral",
    "title": "Checks for trailing comma in hash literals.",
    "description": "Checks for trailing comma in hash literals.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_TrailingMethodEndStatement",
    "title": "Checks for trailing end statement on line of method body.",
    "description": "Checks for trailing end statement on line of method body.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_TrailingUnderscoreVariable",
    "title": "Checks for the usage of unneeded trailing underscores at the end of parallel variable assignment.",
    "description": "Checks for the usage of unneeded trailing underscores at the end of parallel variable assignment.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_TrivialAccessors",
    "title": "Prefer attr_* methods to trivial readers/writers.",
    "description": "Prefer attr_* methods to trivial readers/writers.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_UnlessElse",
    "title": "Do not use unless with else. Rewrite these with the positive case first.",
    "description": "Do not use unless with else. Rewrite these with the positive case first.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_UnpackFirst",
    "title": "Checks for accessing the first element of `String#unpack` instead of using `unpack1`.",
    "description": "Checks for accessing the first element of `String#unpack` instead of using `unpack1`.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_VariableInterpolation",
    "title": "Don't interpolate global, instance and class variables directly in strings.",
    "description": "Don't interpolate global, instance and class variables directly in strings.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_WhenThen",
    "title": "Use when x then ... for one-line cases.",
    "description": "Use when x then ... for one-line cases.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_WhileUntilDo",
    "title": "Checks for redundant do after while or until.",
    "description": "Checks for redundant do after while or until.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_WhileUntilModifier",
    "title": "Favor modifier while/until usage when you have a single-line body.",
    "description": "Favor modifier while/until usage when you have a single-line body.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_WordArray",
    "title": "Use %w or %W for arrays of words.",
    "description": "Use %w or %W for arrays of words.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_YodaCondition",
    "title": "Forbid or enforce yoda conditions.",
    "description": "Forbid or enforce yoda conditions.",
    "timeToFix": 5
  },
  {
    "patternId": "Style_ZeroLengthPredicate",
    "title": "Use #empty? when testing for objects of length 0.",
    "description": "Use #empty? when testing for objects of length 0.",
    "timeToFix": 5
  },
  {
    "patternId": "Security_Eval",
    "title": "The use of eval represents a serious security risk.",
    "description": "The use of eval represents a serious security risk.",
    "timeToFix": 5
  },
  {
    "patternId": "Security_JSONLoad",
    "title": "Prefer usage of `JSON.parse` over `JSON.load` due to potential security issues. See reference for more information.",
    "description": "Prefer usage of `JSON.parse` over `JSON.load` due to potential security issues. See reference for more information.",
    "timeToFix": 5
  },
  {
    "patternId": "Security_MarshalLoad",
    "title": "Avoid using of `Marshal.load` or `Marshal.restore` due to potential security issues. See reference for more information.",
    "description": "Avoid using of `Marshal.load` or `Marshal.restore` due to potential security issues. See reference for more information.",
    "timeToFix": 5
  },
  {
    "patternId": "Security_Open",
    "title": "The use of Kernel#open represents a serious security risk.",
    "description": "The use of Kernel#open represents a serious security risk.",
    "timeToFix": 5
  },
  {
    "patternId": "Security_YAMLLoad",
    "title": "Prefer usage of `YAML.safe_load` over `YAML.load` due to potential security issues. See reference for more information.",
    "description": "Prefer usage of `YAML.safe_load` over `YAML.load` due to potential security issues. See reference for more information.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_Caller",
    "title": "Use `caller(n..n)` instead of `caller`.",
    "description": "Use `caller(n..n)` instead of `caller`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_CaseWhenSplat",
    "title": "Reordering `when` conditions with a splat to the end of the `when` branches can improve performance.",
    "description": "Reordering `when` conditions with a splat to the end of the `when` branches can improve performance.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_Casecmp",
    "title": "Use `casecmp` rather than `downcase ==`, `upcase ==`, `== downcase`, or `== upcase`..",
    "description": "Use `casecmp` rather than `downcase ==`, `upcase ==`, `== downcase`, or `== upcase`..",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_CompareWithBlock",
    "title": "Use `sort_by(&:foo)` instead of `sort { |a, b| a.foo <=> b.foo }`.",
    "description": "Use `sort_by(&:foo)` instead of `sort { |a, b| a.foo <=> b.foo }`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_Count",
    "title": "Use `count` instead of `select...size`, `reject...size`, `select...count`, `reject...count`, `select...length`, and `reject...length`.",
    "description": "Use `count` instead of `select...size`, `reject...size`, `select...count`, `reject...count`, `select...length`, and `reject...length`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_Detect",
    "title": "Use `detect` instead of `select.first`, `find_all.first`, `select.last`, and `find_all.last`.",
    "description": "Use `detect` instead of `select.first`, `find_all.first`, `select.last`, and `find_all.last`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_DoubleStartEndWith",
    "title": "Use `str.{start,end}_with?(x, ..., y, ...)` instead of `str.{start,end}_with?(x, ...) || str.{start,end}_with?(y, ...)`.",
    "description": "Use `str.{start,end}_with?(x, ..., y, ...)` instead of `str.{start,end}_with?(x, ...) || str.{start,end}_with?(y, ...)`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_EndWith",
    "title": "Use `end_with?` instead of a regex match anchored to the end of a string.",
    "description": "Use `end_with?` instead of a regex match anchored to the end of a string.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_FixedSize",
    "title": "Do not compute the size of statically sized objects except in constants",
    "description": "Do not compute the size of statically sized objects except in constants",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_FlatMap",
    "title": "Use `Enumerable#flat_map` instead of `Enumerable#map...Array#flatten(1)` or `Enumberable#collect..Array#flatten(1)`",
    "description": "Use `Enumerable#flat_map` instead of `Enumerable#map...Array#flatten(1)` or `Enumberable#collect..Array#flatten(1)`",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_InefficientHashSearch",
    "title": "Use `key?` or `value?` instead of `keys.include?` or `values.include?`",
    "description": "Use `key?` or `value?` instead of `keys.include?` or `values.include?`",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_OpenStruct",
    "title": "Use `Struct` instead of `OpenStruct`.",
    "description": "Use `Struct` instead of `OpenStruct`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_RangeInclude",
    "title": "Use `Range#cover?` instead of `Range#include?`.",
    "description": "Use `Range#cover?` instead of `Range#include?`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_RedundantBlockCall",
    "title": "Use `yield` instead of `block.call`.",
    "description": "Use `yield` instead of `block.call`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_RedundantMatch",
    "title": "Use `=~` instead of `String#match` or `Regexp#match` in a context where the returned `MatchData` is not needed.",
    "description": "Use `=~` instead of `String#match` or `Regexp#match` in a context where the returned `MatchData` is not needed.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_RedundantMerge",
    "title": "Use Hash#[]=, rather than Hash#merge! with a single key-value pair.",
    "description": "Use Hash#[]=, rather than Hash#merge! with a single key-value pair.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_RegexpMatch",
    "title": "Use `match?` instead of `Regexp#match`, `String#match`, `Symbol#match`, `Regexp#===`, or `=~` when `MatchData` is not used.",
    "description": "Use `match?` instead of `Regexp#match`, `String#match`, `Symbol#match`, `Regexp#===`, or `=~` when `MatchData` is not used.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_ReverseEach",
    "title": "Use `reverse_each` instead of `reverse.each`.",
    "description": "Use `reverse_each` instead of `reverse.each`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_Size",
    "title": "Use `size` instead of `count` for counting the number of elements in `Array` and `Hash`.",
    "description": "Use `size` instead of `count` for counting the number of elements in `Array` and `Hash`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_StartWith",
    "title": "Use `start_with?` instead of a regex match anchored to the beginning of a string.",
    "description": "Use `start_with?` instead of a regex match anchored to the beginning of a string.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_StringReplacement",
    "title": "Use `tr` instead of `gsub` when you are replacing the same number of characters. Use `delete` instead of `gsub` when you are deleting characters.",
    "description": "Use `tr` instead of `gsub` when you are replacing the same number of characters. Use `delete` instead of `gsub` when you are deleting characters.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_TimesMap",
    "title": "Checks for .times.map calls.",
    "description": "Checks for .times.map calls.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_UnfreezeString",
    "title": "Use unary plus to get an unfrozen string literal.",
    "description": "Use unary plus to get an unfrozen string literal.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_UriDefaultParser",
    "title": "Use `URI::DEFAULT_PARSER` instead of `URI::Parser.new`.",
    "description": "Use `URI::DEFAULT_PARSER` instead of `URI::Parser.new`.",
    "timeToFix": 5
  },
  {
    "patternId": "Performance_ChainArrayAllocation",
    "title": "Instead of chaining array methods that allocate new arrays, mutate an existing array.",
    "description": "Instead of chaining array methods that allocate new arrays, mutate an existing array.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_ActionFilter",
    "title": "Enforces consistent use of action filter methods.",
    "description": "Enforces consistent use of action filter methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_ActiveRecordAliases",
    "title": "Avoid Active Record aliases: Use `update` instead of `update_attributes`. Use `update!` instead of `update_attributes!`.",
    "description": "Avoid Active Record aliases: Use `update` instead of `update_attributes`. Use `update!` instead of `update_attributes!`.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_ActiveRecordOverride",
    "title": "Check for overriding Active Record methods instead of using callbacks.",
    "description": "Check for overriding Active Record methods instead of using callbacks.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_ActiveSupportAliases",
    "title": "Avoid ActiveSupport aliases of standard ruby methods: `String#starts_with?`, `String#ends_with?`, `Array#append`, `Array#prepend`.",
    "description": "Avoid ActiveSupport aliases of standard ruby methods: `String#starts_with?`, `String#ends_with?`, `Array#append`, `Array#prepend`.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_ApplicationController",
    "title": "Check that controllers subclass ApplicationController.",
    "description": "Check that controllers subclass ApplicationController.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_ApplicationJob",
    "title": "Check that jobs subclass ApplicationJob.",
    "description": "Check that jobs subclass ApplicationJob.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_ApplicationMailer",
    "title": "Check that mailers subclass ApplicationMailer.",
    "description": "Check that mailers subclass ApplicationMailer.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_ApplicationRecord",
    "title": "Check that models subclass ApplicationRecord.",
    "description": "Check that models subclass ApplicationRecord.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_AssertNot",
    "title": "Use `assert_not` instead of `assert !`.",
    "description": "Use `assert_not` instead of `assert !`.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_BelongsTo",
    "title": "Use `optional: true` instead of `required: false` for `belongs_to` relations'",
    "description": "Use `optional: true` instead of `required: false` for `belongs_to` relations'",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_Blank",
    "title": "Enforces use of `blank?`.",
    "description": "Enforces use of `blank?`.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_BulkChangeTable",
    "title": "Check whether alter queries are combinable.",
    "description": "Check whether alter queries are combinable.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_CreateTableWithTimestamps",
    "title": "Checks the migration for which timestamps are not included when creating a new table.",
    "description": "Checks the migration for which timestamps are not included when creating a new table.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_Date",
    "title": "Checks the correct usage of date aware methods, such as Date.today, Date.current etc.",
    "description": "Checks the correct usage of date aware methods, such as Date.today, Date.current etc.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_Delegate",
    "title": "Prefer delegate method for delegations.",
    "description": "Prefer delegate method for delegations.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_DelegateAllowBlank",
    "title": "Do not use allow_blank as an option to delegate.",
    "description": "Do not use allow_blank as an option to delegate.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_DynamicFindBy",
    "title": "Use `find_by` instead of dynamic `find_by_*`.",
    "description": "Use `find_by` instead of dynamic `find_by_*`.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_EnumHash",
    "title": "Prefer hash syntax over array syntax when defining enums.",
    "description": "Prefer hash syntax over array syntax when defining enums.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_EnumUniqueness",
    "title": "Avoid duplicate integers in hash-syntax `enum` declaration.",
    "description": "Avoid duplicate integers in hash-syntax `enum` declaration.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_EnvironmentComparison",
    "title": "Favor `Rails.env.production?` over `Rails.env == 'production'`",
    "description": "Favor `Rails.env.production?` over `Rails.env == 'production'`",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_Exit",
    "title": "Favor `fail`, `break`, `return`, etc. over `exit` in application or library code outside of Rake files to avoid exits during unit testing or running in production.",
    "description": "Favor `fail`, `break`, `return`, etc. over `exit` in application or library code outside of Rake files to avoid exits during unit testing or running in production.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_FilePath",
    "title": "Use `Rails.root.join` for file path joining.",
    "description": "Use `Rails.root.join` for file path joining.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_FindBy",
    "title": "Prefer find_by over where.first.",
    "description": "Prefer find_by over where.first.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_FindEach",
    "title": "Prefer all.find_each over all.find.",
    "description": "Prefer all.find_each over all.find.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_HasAndBelongsToMany",
    "title": "Prefer has_many :through to has_and_belongs_to_many.",
    "description": "Prefer has_many :through to has_and_belongs_to_many.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_HasManyOrHasOneDependent",
    "title": "Define the dependent option to the has_many and has_one associations.",
    "description": "Define the dependent option to the has_many and has_one associations.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_HelperInstanceVariable",
    "title": "Do not use instance variables in helpers",
    "description": "Do not use instance variables in helpers",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_HttpPositionalArguments",
    "title": "Use keyword arguments instead of positional arguments in http method calls.",
    "description": "Use keyword arguments instead of positional arguments in http method calls.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_HttpStatus",
    "title": "Enforces use of symbolic or numeric value to define HTTP status.",
    "description": "Enforces use of symbolic or numeric value to define HTTP status.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_IgnoredSkipActionFilterOption",
    "title": "Checks that `if` and `only` (or `except`) are not used together as options of `skip_*` action filter.",
    "description": "Checks that `if` and `only` (or `except`) are not used together as options of `skip_*` action filter.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_InverseOf",
    "title": "Checks for associations where the inverse cannot be determined automatically.",
    "description": "Checks for associations where the inverse cannot be determined automatically.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_LexicallyScopedActionFilter",
    "title": "Checks that methods specified in the filter's `only` or `except` options are explicitly defined in the controller.",
    "description": "Checks that methods specified in the filter's `only` or `except` options are explicitly defined in the controller.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_LinkToBlank",
    "title": "Checks that `link_to` with a `target: \"_blank\"` have a `rel: \"noopener\"` option passed to them.",
    "description": "Checks that `link_to` with a `target: \"_blank\"` have a `rel: \"noopener\"` option passed to them.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_NotNullColumn",
    "title": "Do not add a NOT NULL column without a default value",
    "description": "Do not add a NOT NULL column without a default value",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_Output",
    "title": "Checks for calls to puts, print, etc.",
    "description": "Checks for calls to puts, print, etc.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_OutputSafety",
    "title": "The use of `html_safe` or `raw` may be a security risk.",
    "description": "The use of `html_safe` or `raw` may be a security risk.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_PluralizationGrammar",
    "title": "Checks for incorrect grammar when using methods like `3.day.ago`.",
    "description": "Checks for incorrect grammar when using methods like `3.day.ago`.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_Presence",
    "title": "Checks code that can be written more easily using `Object#presence` defined by Active Support.",
    "description": "Checks code that can be written more easily using `Object#presence` defined by Active Support.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_Present",
    "title": "Enforces use of `present?`.",
    "description": "Enforces use of `present?`.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_RakeEnvironment",
    "title": "Include `:environment` as a dependency for all Rake tasks.",
    "description": "Include `:environment` as a dependency for all Rake tasks.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_ReadWriteAttribute",
    "title": "Checks for read_attribute(:attr) and write_attribute(:attr, val).",
    "description": "Checks for read_attribute(:attr) and write_attribute(:attr, val).",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_RedundantAllowNil",
    "title": "Finds redundant use of `allow_nil` when `allow_blank` is set to certain values in model validations.",
    "description": "Finds redundant use of `allow_nil` when `allow_blank` is set to certain values in model validations.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_RedundantReceiverInWithOptions",
    "title": "Checks for redundant receiver in `with_options`.",
    "description": "Checks for redundant receiver in `with_options`.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_ReflectionClassName",
    "title": "Use a string for `class_name` option value in the definition of a reflection.",
    "description": "Use a string for `class_name` option value in the definition of a reflection.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_RefuteMethods",
    "title": "Use `assert_not` methods instead of `refute` methods.",
    "description": "Use `assert_not` methods instead of `refute` methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_RelativeDateConstant",
    "title": "Do not assign relative date to constants.",
    "description": "Do not assign relative date to constants.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_RequestReferer",
    "title": "Use consistent syntax for request.referer.",
    "description": "Use consistent syntax for request.referer.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_ReversibleMigration",
    "title": "Checks whether the change method of the migration file is reversible.",
    "description": "Checks whether the change method of the migration file is reversible.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_SafeNavigation",
    "title": "Use Ruby's safe navigation operator (`&.`) instead of `try!`",
    "description": "Use Ruby's safe navigation operator (`&.`) instead of `try!`",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_SafeNavigationWithBlank",
    "title": "Avoid `foo&.blank?` in conditionals.",
    "description": "Avoid `foo&.blank?` in conditionals.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_SaveBang",
    "title": "Identifies possible cases where Active Record save! or related should be used.",
    "description": "Identifies possible cases where Active Record save! or related should be used.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_ScopeArgs",
    "title": "Checks the arguments of ActiveRecord scopes.",
    "description": "Checks the arguments of ActiveRecord scopes.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_SkipsModelValidations",
    "title": "Use methods that skips model validations with caution. See reference for more information.",
    "description": "Use methods that skips model validations with caution. See reference for more information.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_TimeZone",
    "title": "Checks the correct usage of time zone aware methods.",
    "description": "Checks the correct usage of time zone aware methods.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_UniqBeforePluck",
    "title": "Prefer the use of uniq or distinct before pluck.",
    "description": "Prefer the use of uniq or distinct before pluck.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_UnknownEnv",
    "title": "Use correct environment name.",
    "description": "Use correct environment name.",
    "timeToFix": 5
  },
  {
    "patternId": "Rails_Validation",
    "title": "Use validates :attribute, hash of validations.",
    "description": "Use validates :attribute, hash of validations.",
    "timeToFix": 5
  }
]